;;; this file is automatically generated, do not edit
#||
Copyright (c) 2015-2020 The Khronos Group Inc.

SPDX-License-Identifier: Apache-2.0 OR MIT
||#

(in-package :vk)

(defvk-create-handle-fun (create-instance
                          %vk:create-instance
                          "Represents <vkCreateInstance>"
                          ((create-info (or vk:instance-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (create-info '(:struct %vk:instance-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (instance '%vk:instance instance :out :handle))

(defvk-simple-fun (destroy-instance
                   %vk:destroy-instance
                   "Represents <vkDestroyInstance>"
                   ()
                   (((instance (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (instance '%vk:instance instance :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-enumerate-fun (enumerate-physical-devices
                      %vk:enumerate-physical-devices
                      "Represents <vkEnumeratePhysicalDevices>"
                      ((instance cffi:foreign-pointer))
                      ()
                      physical-device-count
                      physical-devices
                      nil)
  (instance '%vk:instance instance :in :handle)
  (physical-device-count :uint32 physical-device-count :out)
  (physical-devices '%vk:physical-device physical-devices :out :handle :list))

(defvk-simple-fun (get-device-proc-addr
                   %vk:get-device-proc-addr
                   "Represents <vkGetDeviceProcAddr>"
                   ((device cffi:foreign-pointer) (name string))
                   ()
                  '%vk:pfn-void-function)
  (device '%vk:device device :in :handle)
  (name :string name :in :raw))

(defvk-simple-fun (get-instance-proc-addr
                   %vk:get-instance-proc-addr
                   "Represents <vkGetInstanceProcAddr>"
                   ((name string))
                   (((instance (cffi:null-pointer)) cffi:foreign-pointer))
                  '%vk:pfn-void-function)
  (instance '%vk:instance instance :in :handle :optional)
  (name :string name :in :raw))

(defvk-get-struct-fun (get-physical-device-properties
                       %vk:get-physical-device-properties
                       "Represents <vkGetPhysicalDeviceProperties>"
                       ((physical-device cffi:foreign-pointer))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (properties '(:struct %vk:physical-device-properties) properties :out))

(defvk-get-structs-fun (get-physical-device-queue-family-properties
                        %vk:get-physical-device-queue-family-properties
                        "Represents <vkGetPhysicalDeviceQueueFamilyProperties>"
                        ((physical-device cffi:foreign-pointer))
                        ()
                        queue-family-property-count
                        queue-family-properties
                      t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (queue-family-property-count :uint32 queue-family-property-count :out)
  (queue-family-properties '(:struct %vk:queue-family-properties) queue-family-properties :out :list))

(defvk-get-struct-fun (get-physical-device-memory-properties
                       %vk:get-physical-device-memory-properties
                       "Represents <vkGetPhysicalDeviceMemoryProperties>"
                       ((physical-device cffi:foreign-pointer))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (memory-properties '(:struct %vk:physical-device-memory-properties) memory-properties :out))

(defvk-get-struct-fun (get-physical-device-features
                       %vk:get-physical-device-features
                       "Represents <vkGetPhysicalDeviceFeatures>"
                       ((physical-device cffi:foreign-pointer))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (features '(:struct %vk:physical-device-features) features :out))

(defvk-get-struct-fun (get-physical-device-format-properties
                       %vk:get-physical-device-format-properties
                       "Represents <vkGetPhysicalDeviceFormatProperties>"
                       ((physical-device cffi:foreign-pointer) (format keyword))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (format '%vk:format format :in :raw)
  (format-properties '(:struct %vk:format-properties) format-properties :out))

(defvk-get-struct-fun (get-physical-device-image-format-properties
                       %vk:get-physical-device-image-format-properties
                       "Represents <vkGetPhysicalDeviceImageFormatProperties>"
                       ((physical-device cffi:foreign-pointer) (format keyword) (type keyword) (tiling keyword) (usage (or unsigned-byte list)))
                       (((flags nil) (or unsigned-byte list))))
  (physical-device '%vk:physical-device physical-device :in :handle)
  (format '%vk:format format :in :raw)
  (type '%vk:image-type type :in :raw)
  (tiling '%vk:image-tiling tiling :in :raw)
  (usage '%vk:image-usage-flags usage :in :raw)
  (flags '%vk:image-create-flags flags :in :raw :optional)
  (image-format-properties '(:struct %vk:image-format-properties) image-format-properties :out))

(defvk-create-handle-fun (create-device
                          %vk:create-device
                          "Represents <vkCreateDevice>"
                          ((physical-device cffi:foreign-pointer) (create-info (or vk:device-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (create-info '(:struct %vk:device-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (device '%vk:device device :out :handle))

(defvk-simple-fun (destroy-device
                   %vk:destroy-device
                   "Represents <vkDestroyDevice>"
                   ()
                   (((device (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (enumerate-instance-version
                          %vk:enumerate-instance-version
                          "Represents <vkEnumerateInstanceVersion>"
                          ()
                          ()
                          nil)
  (api-version :uint32 api-version :out))

(defvk-enumerate-fun (enumerate-instance-layer-properties
                      %vk:enumerate-instance-layer-properties
                      "Represents <vkEnumerateInstanceLayerProperties>"
                      ()
                      ()
                      property-count
                      properties
                      nil)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:layer-properties) properties :out :list))

(defvk-enumerate-fun (enumerate-instance-extension-properties
                      %vk:enumerate-instance-extension-properties
                      "Represents <vkEnumerateInstanceExtensionProperties>"
                      ()
                      (((layer-name "") string))
                      property-count
                      properties
                      nil)
  (layer-name :string layer-name :in :raw :optional)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:extension-properties) properties :out :list))

(defvk-enumerate-fun (enumerate-device-layer-properties
                      %vk:enumerate-device-layer-properties
                      "Represents <vkEnumerateDeviceLayerProperties>"
                      ((physical-device cffi:foreign-pointer))
                      ()
                      property-count
                      properties
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:layer-properties) properties :out :list))

(defvk-enumerate-fun (enumerate-device-extension-properties
                      %vk:enumerate-device-extension-properties
                      "Represents <vkEnumerateDeviceExtensionProperties>"
                      ((physical-device cffi:foreign-pointer))
                      (((layer-name "") string))
                      property-count
                      properties
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (layer-name :string layer-name :in :raw :optional)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:extension-properties) properties :out :list))

(defvk-create-handle-fun (get-device-queue
                          %vk:get-device-queue
                          "Represents <vkGetDeviceQueue>"
                          ((device cffi:foreign-pointer) (queue-family-index unsigned-byte) (queue-index unsigned-byte))
                          ()
                          t)
  (device '%vk:device device :in :handle)
  (queue-family-index :uint32 queue-family-index :in :raw)
  (queue-index :uint32 queue-index :in :raw)
  (queue '%vk:queue queue :out :handle))

(defvk-simple-fun (queue-submit
                   %vk:queue-submit
                   "Represents <vkQueueSubmit>"
                   ((queue cffi:foreign-pointer) (submits list))
                   (((fence (cffi:null-pointer)) cffi:foreign-pointer))
                  nil)
  (queue '%vk:queue queue :in :handle)
  (submit-count :uint32 (length submits) :in :raw)
  (submits '(:struct %vk:submit-info) submits :in :list)
  (fence '%vk:fence fence :in :handle :optional))

(defvk-simple-fun (queue-wait-idle
                   %vk:queue-wait-idle
                   "Represents <vkQueueWaitIdle>"
                   ((queue cffi:foreign-pointer))
                   ()
                  nil)
  (queue '%vk:queue queue :in :handle))

(defvk-simple-fun (device-wait-idle
                   %vk:device-wait-idle
                   "Represents <vkDeviceWaitIdle>"
                   ((device cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle))

(defvk-create-handle-fun (allocate-memory
                          %vk:allocate-memory
                          "Represents <vkAllocateMemory>"
                          ((device cffi:foreign-pointer) (allocate-info (or vk:memory-allocate-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (allocate-info '(:struct %vk:memory-allocate-info) allocate-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (memory '%vk:device-memory memory :out :handle))

(defvk-simple-fun (free-memory
                   %vk:free-memory
                   "Represents <vkFreeMemory>"
                   ((device cffi:foreign-pointer))
                   (((memory (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (memory '%vk:device-memory memory :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (map-memory
                   %vk:map-memory
                   "Represents <vkMapMemory>"
                   ((device cffi:foreign-pointer) (memory cffi:foreign-pointer) (offset unsigned-byte) (size unsigned-byte) (p-data cffi:foreign-pointer))
                   (((flags nil) (or unsigned-byte list)))
                  nil)
  (device '%vk:device device :in :handle)
  (memory '%vk:device-memory memory :in :handle)
  (offset '%vk:device-size offset :in :raw)
  (size '%vk:device-size size :in :raw)
  (flags '%vk:memory-map-flags flags :in :raw :optional)
  (p-data '(:pointer :void) p-data :in :handle))

(defvk-simple-fun (unmap-memory
                   %vk:unmap-memory
                   "Represents <vkUnmapMemory>"
                   ((device cffi:foreign-pointer) (memory cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (memory '%vk:device-memory memory :in :handle))

(defvk-simple-fun (flush-mapped-memory-ranges
                   %vk:flush-mapped-memory-ranges
                   "Represents <vkFlushMappedMemoryRanges>"
                   ((device cffi:foreign-pointer) (memory-ranges list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (memory-range-count :uint32 (length memory-ranges) :in :raw)
  (memory-ranges '(:struct %vk:mapped-memory-range) memory-ranges :in :list))

(defvk-simple-fun (invalidate-mapped-memory-ranges
                   %vk:invalidate-mapped-memory-ranges
                   "Represents <vkInvalidateMappedMemoryRanges>"
                   ((device cffi:foreign-pointer) (memory-ranges list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (memory-range-count :uint32 (length memory-ranges) :in :raw)
  (memory-ranges '(:struct %vk:mapped-memory-range) memory-ranges :in :list))

(defvk-create-handle-fun (get-device-memory-commitment
                          %vk:get-device-memory-commitment
                          "Represents <vkGetDeviceMemoryCommitment>"
                          ((device cffi:foreign-pointer) (memory cffi:foreign-pointer))
                          ()
                          t)
  (device '%vk:device device :in :handle)
  (memory '%vk:device-memory memory :in :handle)
  (committed-memory-in-bytes '%vk:device-size committed-memory-in-bytes :out))

(defvk-get-struct-fun (get-buffer-memory-requirements
                       %vk:get-buffer-memory-requirements
                       "Represents <vkGetBufferMemoryRequirements>"
                       ((device cffi:foreign-pointer) (buffer cffi:foreign-pointer))
                       ())
  (device '%vk:device device :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (memory-requirements '(:struct %vk:memory-requirements) memory-requirements :out))

(defvk-simple-fun (bind-buffer-memory
                   %vk:bind-buffer-memory
                   "Represents <vkBindBufferMemory>"
                   ((device cffi:foreign-pointer) (buffer cffi:foreign-pointer) (memory cffi:foreign-pointer) (memory-offset unsigned-byte))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (memory '%vk:device-memory memory :in :handle)
  (memory-offset '%vk:device-size memory-offset :in :raw))

(defvk-get-struct-fun (get-image-memory-requirements
                       %vk:get-image-memory-requirements
                       "Represents <vkGetImageMemoryRequirements>"
                       ((device cffi:foreign-pointer) (image cffi:foreign-pointer))
                       ())
  (device '%vk:device device :in :handle)
  (image '%vk:image image :in :handle)
  (memory-requirements '(:struct %vk:memory-requirements) memory-requirements :out))

(defvk-simple-fun (bind-image-memory
                   %vk:bind-image-memory
                   "Represents <vkBindImageMemory>"
                   ((device cffi:foreign-pointer) (image cffi:foreign-pointer) (memory cffi:foreign-pointer) (memory-offset unsigned-byte))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (image '%vk:image image :in :handle)
  (memory '%vk:device-memory memory :in :handle)
  (memory-offset '%vk:device-size memory-offset :in :raw))

(defvk-get-structs-fun (get-image-sparse-memory-requirements
                        %vk:get-image-sparse-memory-requirements
                        "Represents <vkGetImageSparseMemoryRequirements>"
                        ((device cffi:foreign-pointer) (image cffi:foreign-pointer))
                        ()
                        sparse-memory-requirement-count
                        sparse-memory-requirements
                      t)
  (device '%vk:device device :in :handle)
  (image '%vk:image image :in :handle)
  (sparse-memory-requirement-count :uint32 sparse-memory-requirement-count :out)
  (sparse-memory-requirements '(:struct %vk:sparse-image-memory-requirements) sparse-memory-requirements :out :list))

(defvk-get-structs-fun (get-physical-device-sparse-image-format-properties
                        %vk:get-physical-device-sparse-image-format-properties
                        "Represents <vkGetPhysicalDeviceSparseImageFormatProperties>"
                        ((physical-device cffi:foreign-pointer) (format keyword) (type keyword) (samples keyword) (usage (or unsigned-byte list)) (tiling keyword))
                        ()
                        property-count
                        properties
                      t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (format '%vk:format format :in :raw)
  (type '%vk:image-type type :in :raw)
  (samples '%vk:sample-count-flag-bits samples :in :raw)
  (usage '%vk:image-usage-flags usage :in :raw)
  (tiling '%vk:image-tiling tiling :in :raw)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:sparse-image-format-properties) properties :out :list))

(defvk-simple-fun (queue-bind-sparse
                   %vk:queue-bind-sparse
                   "Represents <vkQueueBindSparse>"
                   ((queue cffi:foreign-pointer) (bind-info list))
                   (((fence (cffi:null-pointer)) cffi:foreign-pointer))
                  nil)
  (queue '%vk:queue queue :in :handle)
  (bind-info-count :uint32 (length bind-info) :in :raw)
  (bind-info '(:struct %vk:bind-sparse-info) bind-info :in :list)
  (fence '%vk:fence fence :in :handle :optional))

(defvk-create-handle-fun (create-fence
                          %vk:create-fence
                          "Represents <vkCreateFence>"
                          ((device cffi:foreign-pointer) (create-info (or vk:fence-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:fence-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (fence '%vk:fence fence :out :handle))

(defvk-simple-fun (destroy-fence
                   %vk:destroy-fence
                   "Represents <vkDestroyFence>"
                   ((device cffi:foreign-pointer))
                   (((fence (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (fence '%vk:fence fence :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (reset-fences
                   %vk:reset-fences
                   "Represents <vkResetFences>"
                   ((device cffi:foreign-pointer) (fences list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (fence-count :uint32 (length fences) :in :raw)
  (fences '%vk:fence fences :in :handle :list))

(defvk-simple-fun (get-fence-status
                   %vk:get-fence-status
                   "Represents <vkGetFenceStatus>"
                   ((device cffi:foreign-pointer) (fence cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (fence '%vk:fence fence :in :handle))

(defvk-simple-fun (wait-for-fences
                   %vk:wait-for-fences
                   "Represents <vkWaitForFences>"
                   ((device cffi:foreign-pointer) (fences list) (wait-all boolean) (timeout unsigned-byte))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (fence-count :uint32 (length fences) :in :raw)
  (fences '%vk:fence fences :in :handle :list)
  (wait-all '%vk:bool32 wait-all :in :raw)
  (timeout :uint64 timeout :in :raw))

(defvk-create-handle-fun (create-semaphore
                          %vk:create-semaphore
                          "Represents <vkCreateSemaphore>"
                          ((device cffi:foreign-pointer) (create-info (or vk:semaphore-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:semaphore-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (semaphore '%vk:semaphore semaphore :out :handle))

(defvk-simple-fun (destroy-semaphore
                   %vk:destroy-semaphore
                   "Represents <vkDestroySemaphore>"
                   ((device cffi:foreign-pointer))
                   (((semaphore (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (semaphore '%vk:semaphore semaphore :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (create-event
                          %vk:create-event
                          "Represents <vkCreateEvent>"
                          ((device cffi:foreign-pointer) (create-info (or vk:event-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:event-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (event '%vk:event event :out :handle))

(defvk-simple-fun (destroy-event
                   %vk:destroy-event
                   "Represents <vkDestroyEvent>"
                   ((device cffi:foreign-pointer))
                   (((event (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (event '%vk:event event :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (get-event-status
                   %vk:get-event-status
                   "Represents <vkGetEventStatus>"
                   ((device cffi:foreign-pointer) (event cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (event '%vk:event event :in :handle))

(defvk-simple-fun (set-event
                   %vk:set-event
                   "Represents <vkSetEvent>"
                   ((device cffi:foreign-pointer) (event cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (event '%vk:event event :in :handle))

(defvk-simple-fun (reset-event
                   %vk:reset-event
                   "Represents <vkResetEvent>"
                   ((device cffi:foreign-pointer) (event cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (event '%vk:event event :in :handle))

(defvk-create-handle-fun (create-query-pool
                          %vk:create-query-pool
                          "Represents <vkCreateQueryPool>"
                          ((device cffi:foreign-pointer) (create-info (or vk:query-pool-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:query-pool-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (query-pool '%vk:query-pool query-pool :out :handle))

(defvk-simple-fun (destroy-query-pool
                   %vk:destroy-query-pool
                   "Represents <vkDestroyQueryPool>"
                   ((device cffi:foreign-pointer))
                   (((query-pool (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (query-pool '%vk:query-pool query-pool :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (get-query-pool-results
                   %vk:get-query-pool-results
                   "Represents <vkGetQueryPoolResults>"
                   ((device cffi:foreign-pointer) (query-pool cffi:foreign-pointer) (first-query unsigned-byte) (query-count unsigned-byte) (data-size unsigned-byte) (data cffi:foreign-pointer) (stride unsigned-byte))
                   (((flags nil) (or unsigned-byte list)))
                  nil)
  (device '%vk:device device :in :handle)
  (query-pool '%vk:query-pool query-pool :in :handle)
  (first-query :uint32 first-query :in :raw)
  (query-count :uint32 query-count :in :raw)
  (data-size '%vk:size-t data-size :in :raw)
  (data '(:pointer :void) data :in :handle)
  (stride '%vk:device-size stride :in :raw)
  (flags '%vk:query-result-flags flags :in :raw :optional))

(defvk-simple-fun (reset-query-pool
                   %vk:reset-query-pool
                   "Represents <vkResetQueryPool>"
                   ((device cffi:foreign-pointer) (query-pool cffi:foreign-pointer) (first-query unsigned-byte) (query-count unsigned-byte))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (query-pool '%vk:query-pool query-pool :in :handle)
  (first-query :uint32 first-query :in :raw)
  (query-count :uint32 query-count :in :raw))

(defvk-simple-fun (reset-query-pool-ext
                   %vk:reset-query-pool-ext
                   "Represents <vkResetQueryPoolEXT>"
                   ((device cffi:foreign-pointer) (query-pool cffi:foreign-pointer) (first-query unsigned-byte) (query-count unsigned-byte))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (query-pool '%vk:query-pool query-pool :in :handle)
  (first-query :uint32 first-query :in :raw)
  (query-count :uint32 query-count :in :raw))

(defvk-create-handle-fun (create-buffer
                          %vk:create-buffer
                          "Represents <vkCreateBuffer>"
                          ((device cffi:foreign-pointer) (create-info (or vk:buffer-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:buffer-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (buffer '%vk:buffer buffer :out :handle))

(defvk-simple-fun (destroy-buffer
                   %vk:destroy-buffer
                   "Represents <vkDestroyBuffer>"
                   ((device cffi:foreign-pointer))
                   (((buffer (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (buffer '%vk:buffer buffer :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (create-buffer-view
                          %vk:create-buffer-view
                          "Represents <vkCreateBufferView>"
                          ((device cffi:foreign-pointer) (create-info (or vk:buffer-view-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:buffer-view-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (view '%vk:buffer-view view :out :handle))

(defvk-simple-fun (destroy-buffer-view
                   %vk:destroy-buffer-view
                   "Represents <vkDestroyBufferView>"
                   ((device cffi:foreign-pointer))
                   (((buffer-view (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (buffer-view '%vk:buffer-view buffer-view :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (create-image
                          %vk:create-image
                          "Represents <vkCreateImage>"
                          ((device cffi:foreign-pointer) (create-info (or vk:image-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:image-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (image '%vk:image image :out :handle))

(defvk-simple-fun (destroy-image
                   %vk:destroy-image
                   "Represents <vkDestroyImage>"
                   ((device cffi:foreign-pointer))
                   (((image (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (image '%vk:image image :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-get-struct-fun (get-image-subresource-layout
                       %vk:get-image-subresource-layout
                       "Represents <vkGetImageSubresourceLayout>"
                       ((device cffi:foreign-pointer) (image cffi:foreign-pointer) (subresource (or vk:image-subresource cffi:foreign-pointer)))
                       ())
  (device '%vk:device device :in :handle)
  (image '%vk:image image :in :handle)
  (subresource '(:struct %vk:image-subresource) subresource :in)
  (layout '(:struct %vk:subresource-layout) layout :out))

(defvk-create-handle-fun (create-image-view
                          %vk:create-image-view
                          "Represents <vkCreateImageView>"
                          ((device cffi:foreign-pointer) (create-info (or vk:image-view-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:image-view-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (view '%vk:image-view view :out :handle))

(defvk-simple-fun (destroy-image-view
                   %vk:destroy-image-view
                   "Represents <vkDestroyImageView>"
                   ((device cffi:foreign-pointer))
                   (((image-view (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (image-view '%vk:image-view image-view :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (create-shader-module
                          %vk:create-shader-module
                          "Represents <vkCreateShaderModule>"
                          ((device cffi:foreign-pointer) (create-info (or vk:shader-module-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:shader-module-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (shader-module '%vk:shader-module shader-module :out :handle))

(defvk-simple-fun (destroy-shader-module
                   %vk:destroy-shader-module
                   "Represents <vkDestroyShaderModule>"
                   ((device cffi:foreign-pointer))
                   (((shader-module (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (shader-module '%vk:shader-module shader-module :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (create-pipeline-cache
                          %vk:create-pipeline-cache
                          "Represents <vkCreatePipelineCache>"
                          ((device cffi:foreign-pointer) (create-info (or vk:pipeline-cache-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:pipeline-cache-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (pipeline-cache '%vk:pipeline-cache pipeline-cache :out :handle))

(defvk-simple-fun (destroy-pipeline-cache
                   %vk:destroy-pipeline-cache
                   "Represents <vkDestroyPipelineCache>"
                   ((device cffi:foreign-pointer))
                   (((pipeline-cache (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (pipeline-cache '%vk:pipeline-cache pipeline-cache :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (get-pipeline-cache-data
                          %vk:get-pipeline-cache-data
                          "Represents <vkGetPipelineCacheData>"
                          ((device cffi:foreign-pointer) (pipeline-cache cffi:foreign-pointer))
                          (((data nil) cffi:foreign-pointer))
                          nil)
  (device '%vk:device device :in :handle)
  (pipeline-cache '%vk:pipeline-cache pipeline-cache :in :handle)
  (data-size '%vk:size-t data-size :out)
  (data '(:pointer :void) data :in :handle :optional))

(defvk-simple-fun (merge-pipeline-caches
                   %vk:merge-pipeline-caches
                   "Represents <vkMergePipelineCaches>"
                   ((device cffi:foreign-pointer) (dst-cache cffi:foreign-pointer) (src-caches list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (dst-cache '%vk:pipeline-cache dst-cache :in :handle)
  (src-cache-count :uint32 (length src-caches) :in :raw)
  (src-caches '%vk:pipeline-cache src-caches :in :handle :list))

(defvk-create-handles-fun (create-graphics-pipelines
                           %vk:create-graphics-pipelines
                           "Represents <vkCreateGraphicsPipelines>"
                           ((device cffi:foreign-pointer) (create-infos list))
                           (((pipeline-cache (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                           (length create-infos))
  (device '%vk:device device :in :handle)
  (pipeline-cache '%vk:pipeline-cache pipeline-cache :in :handle :optional)
  (create-info-count :uint32 (length create-infos) :in :raw)
  (create-infos '(:struct %vk:graphics-pipeline-create-info) create-infos :in :list)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (pipelines '%vk:pipeline pipelines :out :handle :list))

(defvk-create-handles-fun (create-compute-pipelines
                           %vk:create-compute-pipelines
                           "Represents <vkCreateComputePipelines>"
                           ((device cffi:foreign-pointer) (create-infos list))
                           (((pipeline-cache (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                           (length create-infos))
  (device '%vk:device device :in :handle)
  (pipeline-cache '%vk:pipeline-cache pipeline-cache :in :handle :optional)
  (create-info-count :uint32 (length create-infos) :in :raw)
  (create-infos '(:struct %vk:compute-pipeline-create-info) create-infos :in :list)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (pipelines '%vk:pipeline pipelines :out :handle :list))

(defvk-simple-fun (destroy-pipeline
                   %vk:destroy-pipeline
                   "Represents <vkDestroyPipeline>"
                   ((device cffi:foreign-pointer))
                   (((pipeline (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (pipeline '%vk:pipeline pipeline :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (create-pipeline-layout
                          %vk:create-pipeline-layout
                          "Represents <vkCreatePipelineLayout>"
                          ((device cffi:foreign-pointer) (create-info (or vk:pipeline-layout-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:pipeline-layout-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (pipeline-layout '%vk:pipeline-layout pipeline-layout :out :handle))

(defvk-simple-fun (destroy-pipeline-layout
                   %vk:destroy-pipeline-layout
                   "Represents <vkDestroyPipelineLayout>"
                   ((device cffi:foreign-pointer))
                   (((pipeline-layout (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (pipeline-layout '%vk:pipeline-layout pipeline-layout :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (create-sampler
                          %vk:create-sampler
                          "Represents <vkCreateSampler>"
                          ((device cffi:foreign-pointer) (create-info (or vk:sampler-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:sampler-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (sampler '%vk:sampler sampler :out :handle))

(defvk-simple-fun (destroy-sampler
                   %vk:destroy-sampler
                   "Represents <vkDestroySampler>"
                   ((device cffi:foreign-pointer))
                   (((sampler (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (sampler '%vk:sampler sampler :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (create-descriptor-set-layout
                          %vk:create-descriptor-set-layout
                          "Represents <vkCreateDescriptorSetLayout>"
                          ((device cffi:foreign-pointer) (create-info (or vk:descriptor-set-layout-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:descriptor-set-layout-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (set-layout '%vk:descriptor-set-layout set-layout :out :handle))

(defvk-simple-fun (destroy-descriptor-set-layout
                   %vk:destroy-descriptor-set-layout
                   "Represents <vkDestroyDescriptorSetLayout>"
                   ((device cffi:foreign-pointer))
                   (((descriptor-set-layout (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (descriptor-set-layout '%vk:descriptor-set-layout descriptor-set-layout :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (create-descriptor-pool
                          %vk:create-descriptor-pool
                          "Represents <vkCreateDescriptorPool>"
                          ((device cffi:foreign-pointer) (create-info (or vk:descriptor-pool-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:descriptor-pool-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (descriptor-pool '%vk:descriptor-pool descriptor-pool :out :handle))

(defvk-simple-fun (destroy-descriptor-pool
                   %vk:destroy-descriptor-pool
                   "Represents <vkDestroyDescriptorPool>"
                   ((device cffi:foreign-pointer))
                   (((descriptor-pool (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (descriptor-pool '%vk:descriptor-pool descriptor-pool :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (reset-descriptor-pool
                   %vk:reset-descriptor-pool
                   "Represents <vkResetDescriptorPool>"
                   ((device cffi:foreign-pointer) (descriptor-pool cffi:foreign-pointer))
                   (((flags nil) (or unsigned-byte list)))
                  nil)
  (device '%vk:device device :in :handle)
  (descriptor-pool '%vk:descriptor-pool descriptor-pool :in :handle)
  (flags '%vk:descriptor-pool-reset-flags flags :in :raw :optional))

(defvk-create-handles-fun (allocate-descriptor-sets
                           %vk:allocate-descriptor-sets
                           "Represents <vkAllocateDescriptorSets>"
                           ((device cffi:foreign-pointer) (allocate-info (or vk:descriptor-set-allocate-info cffi:foreign-pointer)))
                           ()
                           (length (vk:set-layouts allocate-info)))
  (device '%vk:device device :in :handle)
  (allocate-info '(:struct %vk:descriptor-set-allocate-info) allocate-info :in)
  (descriptor-sets '%vk:descriptor-set descriptor-sets :out :handle :list))

(defvk-simple-fun (free-descriptor-sets
                   %vk:free-descriptor-sets
                   "Represents <vkFreeDescriptorSets>"
                   ((device cffi:foreign-pointer) (descriptor-pool cffi:foreign-pointer) (descriptor-sets list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (descriptor-pool '%vk:descriptor-pool descriptor-pool :in :handle)
  (descriptor-set-count :uint32 (length descriptor-sets) :in :raw)
  (descriptor-sets '%vk:descriptor-set descriptor-sets :in :handle :list))

(defvk-simple-fun (update-descriptor-sets
                   %vk:update-descriptor-sets
                   "Represents <vkUpdateDescriptorSets>"
                   ((device cffi:foreign-pointer) (descriptor-writes list) (descriptor-copies list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (descriptor-write-count :uint32 (length descriptor-writes) :in :raw)
  (descriptor-writes '(:struct %vk:write-descriptor-set) descriptor-writes :in :list)
  (descriptor-copy-count :uint32 (length descriptor-copies) :in :raw)
  (descriptor-copies '(:struct %vk:copy-descriptor-set) descriptor-copies :in :list))

(defvk-create-handle-fun (create-framebuffer
                          %vk:create-framebuffer
                          "Represents <vkCreateFramebuffer>"
                          ((device cffi:foreign-pointer) (create-info (or vk:framebuffer-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:framebuffer-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (framebuffer '%vk:framebuffer framebuffer :out :handle))

(defvk-simple-fun (destroy-framebuffer
                   %vk:destroy-framebuffer
                   "Represents <vkDestroyFramebuffer>"
                   ((device cffi:foreign-pointer))
                   (((framebuffer (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (framebuffer '%vk:framebuffer framebuffer :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (create-render-pass
                          %vk:create-render-pass
                          "Represents <vkCreateRenderPass>"
                          ((device cffi:foreign-pointer) (create-info (or vk:render-pass-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:render-pass-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (render-pass '%vk:render-pass render-pass :out :handle))

(defvk-simple-fun (destroy-render-pass
                   %vk:destroy-render-pass
                   "Represents <vkDestroyRenderPass>"
                   ((device cffi:foreign-pointer))
                   (((render-pass (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (render-pass '%vk:render-pass render-pass :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-get-struct-fun (get-render-area-granularity
                       %vk:get-render-area-granularity
                       "Represents <vkGetRenderAreaGranularity>"
                       ((device cffi:foreign-pointer) (render-pass cffi:foreign-pointer))
                       ())
  (device '%vk:device device :in :handle)
  (render-pass '%vk:render-pass render-pass :in :handle)
  (granularity '(:struct %vk:extent-2d) granularity :out))

(defvk-create-handle-fun (create-command-pool
                          %vk:create-command-pool
                          "Represents <vkCreateCommandPool>"
                          ((device cffi:foreign-pointer) (create-info (or vk:command-pool-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:command-pool-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (command-pool '%vk:command-pool command-pool :out :handle))

(defvk-simple-fun (destroy-command-pool
                   %vk:destroy-command-pool
                   "Represents <vkDestroyCommandPool>"
                   ((device cffi:foreign-pointer))
                   (((command-pool (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (command-pool '%vk:command-pool command-pool :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (reset-command-pool
                   %vk:reset-command-pool
                   "Represents <vkResetCommandPool>"
                   ((device cffi:foreign-pointer) (command-pool cffi:foreign-pointer))
                   (((flags nil) (or unsigned-byte list)))
                  nil)
  (device '%vk:device device :in :handle)
  (command-pool '%vk:command-pool command-pool :in :handle)
  (flags '%vk:command-pool-reset-flags flags :in :raw :optional))

(defvk-create-handles-fun (allocate-command-buffers
                           %vk:allocate-command-buffers
                           "Represents <vkAllocateCommandBuffers>"
                           ((device cffi:foreign-pointer) (allocate-info (or vk:command-buffer-allocate-info cffi:foreign-pointer)))
                           ()
                           (vk:command-buffer-count allocate-info))
  (device '%vk:device device :in :handle)
  (allocate-info '(:struct %vk:command-buffer-allocate-info) allocate-info :in)
  (command-buffers '%vk:command-buffer command-buffers :out :handle :list))

(defvk-simple-fun (free-command-buffers
                   %vk:free-command-buffers
                   "Represents <vkFreeCommandBuffers>"
                   ((device cffi:foreign-pointer) (command-pool cffi:foreign-pointer) (command-buffers list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (command-pool '%vk:command-pool command-pool :in :handle)
  (command-buffer-count :uint32 (length command-buffers) :in :raw)
  (command-buffers '%vk:command-buffer command-buffers :in :handle :list))

(defvk-simple-fun (begin-command-buffer
                   %vk:begin-command-buffer
                   "Represents <vkBeginCommandBuffer>"
                   ((command-buffer cffi:foreign-pointer) (begin-info (or vk:command-buffer-begin-info cffi:foreign-pointer)))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (begin-info '(:struct %vk:command-buffer-begin-info) begin-info :in))

(defvk-simple-fun (end-command-buffer
                   %vk:end-command-buffer
                   "Represents <vkEndCommandBuffer>"
                   ((command-buffer cffi:foreign-pointer))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle))

(defvk-simple-fun (reset-command-buffer
                   %vk:reset-command-buffer
                   "Represents <vkResetCommandBuffer>"
                   ((command-buffer cffi:foreign-pointer))
                   (((flags nil) (or unsigned-byte list)))
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (flags '%vk:command-buffer-reset-flags flags :in :raw :optional))

(defvk-simple-fun (cmd-bind-pipeline
                   %vk:cmd-bind-pipeline
                   "Represents <vkCmdBindPipeline>"
                   ((command-buffer cffi:foreign-pointer) (pipeline-bind-point keyword) (pipeline cffi:foreign-pointer))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (pipeline-bind-point '%vk:pipeline-bind-point pipeline-bind-point :in :raw)
  (pipeline '%vk:pipeline pipeline :in :handle))

(defvk-simple-fun (cmd-set-viewport
                   %vk:cmd-set-viewport
                   "Represents <vkCmdSetViewport>"
                   ((command-buffer cffi:foreign-pointer) (first-viewport unsigned-byte) (viewports list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (first-viewport :uint32 first-viewport :in :raw)
  (viewport-count :uint32 (length viewports) :in :raw)
  (viewports '(:struct %vk:viewport) viewports :in :list))

(defvk-simple-fun (cmd-set-scissor
                   %vk:cmd-set-scissor
                   "Represents <vkCmdSetScissor>"
                   ((command-buffer cffi:foreign-pointer) (first-scissor unsigned-byte) (scissors list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (first-scissor :uint32 first-scissor :in :raw)
  (scissor-count :uint32 (length scissors) :in :raw)
  (scissors '(:struct %vk:rect-2d) scissors :in :list))

(defvk-simple-fun (cmd-set-line-width
                   %vk:cmd-set-line-width
                   "Represents <vkCmdSetLineWidth>"
                   ((command-buffer cffi:foreign-pointer) (line-width real))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (line-width :float line-width :in :raw))

(defvk-simple-fun (cmd-set-depth-bias
                   %vk:cmd-set-depth-bias
                   "Represents <vkCmdSetDepthBias>"
                   ((command-buffer cffi:foreign-pointer) (depth-bias-constant-factor real) (depth-bias-clamp real) (depth-bias-slope-factor real))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (depth-bias-constant-factor :float depth-bias-constant-factor :in :raw)
  (depth-bias-clamp :float depth-bias-clamp :in :raw)
  (depth-bias-slope-factor :float depth-bias-slope-factor :in :raw))

(defvk-simple-fun (cmd-set-blend-constants
                   %vk:cmd-set-blend-constants
                   "Represents <vkCmdSetBlendConstants>"
                   ((command-buffer cffi:foreign-pointer) (blend-constants real))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (blend-constants :float blend-constants :in :raw))

(defvk-simple-fun (cmd-set-depth-bounds
                   %vk:cmd-set-depth-bounds
                   "Represents <vkCmdSetDepthBounds>"
                   ((command-buffer cffi:foreign-pointer) (min-depth-bounds real) (max-depth-bounds real))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (min-depth-bounds :float min-depth-bounds :in :raw)
  (max-depth-bounds :float max-depth-bounds :in :raw))

(defvk-simple-fun (cmd-set-stencil-compare-mask
                   %vk:cmd-set-stencil-compare-mask
                   "Represents <vkCmdSetStencilCompareMask>"
                   ((command-buffer cffi:foreign-pointer) (face-mask (or unsigned-byte list)) (compare-mask unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (face-mask '%vk:stencil-face-flags face-mask :in :raw)
  (compare-mask :uint32 compare-mask :in :raw))

(defvk-simple-fun (cmd-set-stencil-write-mask
                   %vk:cmd-set-stencil-write-mask
                   "Represents <vkCmdSetStencilWriteMask>"
                   ((command-buffer cffi:foreign-pointer) (face-mask (or unsigned-byte list)) (write-mask unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (face-mask '%vk:stencil-face-flags face-mask :in :raw)
  (write-mask :uint32 write-mask :in :raw))

(defvk-simple-fun (cmd-set-stencil-reference
                   %vk:cmd-set-stencil-reference
                   "Represents <vkCmdSetStencilReference>"
                   ((command-buffer cffi:foreign-pointer) (face-mask (or unsigned-byte list)) (reference unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (face-mask '%vk:stencil-face-flags face-mask :in :raw)
  (reference :uint32 reference :in :raw))

(defvk-simple-fun (cmd-bind-descriptor-sets
                   %vk:cmd-bind-descriptor-sets
                   "Represents <vkCmdBindDescriptorSets>"
                   ((command-buffer cffi:foreign-pointer) (pipeline-bind-point keyword) (layout cffi:foreign-pointer) (first-set unsigned-byte) (descriptor-sets list) (dynamic-offsets list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (pipeline-bind-point '%vk:pipeline-bind-point pipeline-bind-point :in :raw)
  (layout '%vk:pipeline-layout layout :in :handle)
  (first-set :uint32 first-set :in :raw)
  (descriptor-set-count :uint32 (length descriptor-sets) :in :raw)
  (descriptor-sets '%vk:descriptor-set descriptor-sets :in :handle :list)
  (dynamic-offset-count :uint32 (length dynamic-offsets) :in :raw)
  (dynamic-offsets :uint32 dynamic-offsets :in :list))

(defvk-simple-fun (cmd-bind-index-buffer
                   %vk:cmd-bind-index-buffer
                   "Represents <vkCmdBindIndexBuffer>"
                   ((command-buffer cffi:foreign-pointer) (buffer cffi:foreign-pointer) (offset unsigned-byte) (index-type keyword))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw)
  (index-type '%vk:index-type index-type :in :raw))

(defvk-simple-fun (cmd-bind-vertex-buffers
                   %vk:cmd-bind-vertex-buffers
                   "Represents <vkCmdBindVertexBuffers>"
                   ((command-buffer cffi:foreign-pointer) (first-binding unsigned-byte) (buffers list) (offsets list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (first-binding :uint32 first-binding :in :raw)
  (binding-count :uint32 (length offsets) :in :raw)
  (buffers '%vk:buffer buffers :in :handle :list)
  (offsets '%vk:device-size offsets :in :list))

(defvk-simple-fun (cmd-draw
                   %vk:cmd-draw
                   "Represents <vkCmdDraw>"
                   ((command-buffer cffi:foreign-pointer) (vertex-count unsigned-byte) (instance-count unsigned-byte) (first-vertex unsigned-byte) (first-instance unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (vertex-count :uint32 vertex-count :in :raw)
  (instance-count :uint32 instance-count :in :raw)
  (first-vertex :uint32 first-vertex :in :raw)
  (first-instance :uint32 first-instance :in :raw))

(defvk-simple-fun (cmd-draw-indexed
                   %vk:cmd-draw-indexed
                   "Represents <vkCmdDrawIndexed>"
                   ((command-buffer cffi:foreign-pointer) (index-count unsigned-byte) (instance-count unsigned-byte) (first-index unsigned-byte) (vertex-offset integer) (first-instance unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (index-count :uint32 index-count :in :raw)
  (instance-count :uint32 instance-count :in :raw)
  (first-index :uint32 first-index :in :raw)
  (vertex-offset :int32 vertex-offset :in :raw)
  (first-instance :uint32 first-instance :in :raw))

(defvk-simple-fun (cmd-draw-indirect
                   %vk:cmd-draw-indirect
                   "Represents <vkCmdDrawIndirect>"
                   ((command-buffer cffi:foreign-pointer) (buffer cffi:foreign-pointer) (offset unsigned-byte) (draw-count unsigned-byte) (stride unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw)
  (draw-count :uint32 draw-count :in :raw)
  (stride :uint32 stride :in :raw))

(defvk-simple-fun (cmd-draw-indexed-indirect
                   %vk:cmd-draw-indexed-indirect
                   "Represents <vkCmdDrawIndexedIndirect>"
                   ((command-buffer cffi:foreign-pointer) (buffer cffi:foreign-pointer) (offset unsigned-byte) (draw-count unsigned-byte) (stride unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw)
  (draw-count :uint32 draw-count :in :raw)
  (stride :uint32 stride :in :raw))

(defvk-simple-fun (cmd-dispatch
                   %vk:cmd-dispatch
                   "Represents <vkCmdDispatch>"
                   ((command-buffer cffi:foreign-pointer) (group-count-x unsigned-byte) (group-count-y unsigned-byte) (group-count-z unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (group-count-x :uint32 group-count-x :in :raw)
  (group-count-y :uint32 group-count-y :in :raw)
  (group-count-z :uint32 group-count-z :in :raw))

(defvk-simple-fun (cmd-dispatch-indirect
                   %vk:cmd-dispatch-indirect
                   "Represents <vkCmdDispatchIndirect>"
                   ((command-buffer cffi:foreign-pointer) (buffer cffi:foreign-pointer) (offset unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw))

(defvk-simple-fun (cmd-copy-buffer
                   %vk:cmd-copy-buffer
                   "Represents <vkCmdCopyBuffer>"
                   ((command-buffer cffi:foreign-pointer) (src-buffer cffi:foreign-pointer) (dst-buffer cffi:foreign-pointer) (regions list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (src-buffer '%vk:buffer src-buffer :in :handle)
  (dst-buffer '%vk:buffer dst-buffer :in :handle)
  (region-count :uint32 (length regions) :in :raw)
  (regions '(:struct %vk:buffer-copy) regions :in :list))

(defvk-simple-fun (cmd-copy-image
                   %vk:cmd-copy-image
                   "Represents <vkCmdCopyImage>"
                   ((command-buffer cffi:foreign-pointer) (src-image cffi:foreign-pointer) (src-image-layout keyword) (dst-image cffi:foreign-pointer) (dst-image-layout keyword) (regions list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (src-image '%vk:image src-image :in :handle)
  (src-image-layout '%vk:image-layout src-image-layout :in :raw)
  (dst-image '%vk:image dst-image :in :handle)
  (dst-image-layout '%vk:image-layout dst-image-layout :in :raw)
  (region-count :uint32 (length regions) :in :raw)
  (regions '(:struct %vk:image-copy) regions :in :list))

(defvk-simple-fun (cmd-blit-image
                   %vk:cmd-blit-image
                   "Represents <vkCmdBlitImage>"
                   ((command-buffer cffi:foreign-pointer) (src-image cffi:foreign-pointer) (src-image-layout keyword) (dst-image cffi:foreign-pointer) (dst-image-layout keyword) (regions list) (filter keyword))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (src-image '%vk:image src-image :in :handle)
  (src-image-layout '%vk:image-layout src-image-layout :in :raw)
  (dst-image '%vk:image dst-image :in :handle)
  (dst-image-layout '%vk:image-layout dst-image-layout :in :raw)
  (region-count :uint32 (length regions) :in :raw)
  (regions '(:struct %vk:image-blit) regions :in :list)
  (filter '%vk:filter filter :in :raw))

(defvk-simple-fun (cmd-copy-buffer-to-image
                   %vk:cmd-copy-buffer-to-image
                   "Represents <vkCmdCopyBufferToImage>"
                   ((command-buffer cffi:foreign-pointer) (src-buffer cffi:foreign-pointer) (dst-image cffi:foreign-pointer) (dst-image-layout keyword) (regions list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (src-buffer '%vk:buffer src-buffer :in :handle)
  (dst-image '%vk:image dst-image :in :handle)
  (dst-image-layout '%vk:image-layout dst-image-layout :in :raw)
  (region-count :uint32 (length regions) :in :raw)
  (regions '(:struct %vk:buffer-image-copy) regions :in :list))

(defvk-simple-fun (cmd-copy-image-to-buffer
                   %vk:cmd-copy-image-to-buffer
                   "Represents <vkCmdCopyImageToBuffer>"
                   ((command-buffer cffi:foreign-pointer) (src-image cffi:foreign-pointer) (src-image-layout keyword) (dst-buffer cffi:foreign-pointer) (regions list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (src-image '%vk:image src-image :in :handle)
  (src-image-layout '%vk:image-layout src-image-layout :in :raw)
  (dst-buffer '%vk:buffer dst-buffer :in :handle)
  (region-count :uint32 (length regions) :in :raw)
  (regions '(:struct %vk:buffer-image-copy) regions :in :list))

(defvk-simple-fun (cmd-update-buffer
                   %vk:cmd-update-buffer
                   "Represents <vkCmdUpdateBuffer>"
                   ((command-buffer cffi:foreign-pointer) (dst-buffer cffi:foreign-pointer) (dst-offset unsigned-byte) (data-size unsigned-byte) (data cffi:foreign-pointer))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (dst-buffer '%vk:buffer dst-buffer :in :handle)
  (dst-offset '%vk:device-size dst-offset :in :raw)
  (data-size '%vk:device-size data-size :in :raw)
  (data '(:pointer :void) data :in :handle))

(defvk-simple-fun (cmd-fill-buffer
                   %vk:cmd-fill-buffer
                   "Represents <vkCmdFillBuffer>"
                   ((command-buffer cffi:foreign-pointer) (dst-buffer cffi:foreign-pointer) (dst-offset unsigned-byte) (size unsigned-byte) (data unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (dst-buffer '%vk:buffer dst-buffer :in :handle)
  (dst-offset '%vk:device-size dst-offset :in :raw)
  (size '%vk:device-size size :in :raw)
  (data :uint32 data :in :raw))

(defvk-simple-fun (cmd-clear-color-image
                   %vk:cmd-clear-color-image
                   "Represents <vkCmdClearColorImage>"
                   ((command-buffer cffi:foreign-pointer) (image cffi:foreign-pointer) (image-layout keyword) (color (or vk:clear-color-value cffi:foreign-pointer)) (ranges list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (image '%vk:image image :in :handle)
  (image-layout '%vk:image-layout image-layout :in :raw)
  (color '(:union %vk:clear-color-value) color :in)
  (range-count :uint32 (length ranges) :in :raw)
  (ranges '(:struct %vk:image-subresource-range) ranges :in :list))

(defvk-simple-fun (cmd-clear-depth-stencil-image
                   %vk:cmd-clear-depth-stencil-image
                   "Represents <vkCmdClearDepthStencilImage>"
                   ((command-buffer cffi:foreign-pointer) (image cffi:foreign-pointer) (image-layout keyword) (depth-stencil (or vk:clear-depth-stencil-value cffi:foreign-pointer)) (ranges list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (image '%vk:image image :in :handle)
  (image-layout '%vk:image-layout image-layout :in :raw)
  (depth-stencil '(:struct %vk:clear-depth-stencil-value) depth-stencil :in)
  (range-count :uint32 (length ranges) :in :raw)
  (ranges '(:struct %vk:image-subresource-range) ranges :in :list))

(defvk-simple-fun (cmd-clear-attachments
                   %vk:cmd-clear-attachments
                   "Represents <vkCmdClearAttachments>"
                   ((command-buffer cffi:foreign-pointer) (attachments list) (rects list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (attachment-count :uint32 (length attachments) :in :raw)
  (attachments '(:struct %vk:clear-attachment) attachments :in :list)
  (rect-count :uint32 (length rects) :in :raw)
  (rects '(:struct %vk:clear-rect) rects :in :list))

(defvk-simple-fun (cmd-resolve-image
                   %vk:cmd-resolve-image
                   "Represents <vkCmdResolveImage>"
                   ((command-buffer cffi:foreign-pointer) (src-image cffi:foreign-pointer) (src-image-layout keyword) (dst-image cffi:foreign-pointer) (dst-image-layout keyword) (regions list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (src-image '%vk:image src-image :in :handle)
  (src-image-layout '%vk:image-layout src-image-layout :in :raw)
  (dst-image '%vk:image dst-image :in :handle)
  (dst-image-layout '%vk:image-layout dst-image-layout :in :raw)
  (region-count :uint32 (length regions) :in :raw)
  (regions '(:struct %vk:image-resolve) regions :in :list))

(defvk-simple-fun (cmd-set-event
                   %vk:cmd-set-event
                   "Represents <vkCmdSetEvent>"
                   ((command-buffer cffi:foreign-pointer) (event cffi:foreign-pointer) (stage-mask (or unsigned-byte list)))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (event '%vk:event event :in :handle)
  (stage-mask '%vk:pipeline-stage-flags stage-mask :in :raw))

(defvk-simple-fun (cmd-reset-event
                   %vk:cmd-reset-event
                   "Represents <vkCmdResetEvent>"
                   ((command-buffer cffi:foreign-pointer) (event cffi:foreign-pointer) (stage-mask (or unsigned-byte list)))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (event '%vk:event event :in :handle)
  (stage-mask '%vk:pipeline-stage-flags stage-mask :in :raw))

(defvk-simple-fun (cmd-wait-events
                   %vk:cmd-wait-events
                   "Represents <vkCmdWaitEvents>"
                   ((command-buffer cffi:foreign-pointer) (events list) (src-stage-mask (or unsigned-byte list)) (dst-stage-mask (or unsigned-byte list)) (memory-barriers list) (buffer-memory-barriers list) (image-memory-barriers list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (event-count :uint32 (length events) :in :raw)
  (events '%vk:event events :in :handle :list)
  (src-stage-mask '%vk:pipeline-stage-flags src-stage-mask :in :raw)
  (dst-stage-mask '%vk:pipeline-stage-flags dst-stage-mask :in :raw)
  (memory-barrier-count :uint32 (length memory-barriers) :in :raw)
  (memory-barriers '(:struct %vk:memory-barrier) memory-barriers :in :list)
  (buffer-memory-barrier-count :uint32 (length buffer-memory-barriers) :in :raw)
  (buffer-memory-barriers '(:struct %vk:buffer-memory-barrier) buffer-memory-barriers :in :list)
  (image-memory-barrier-count :uint32 (length image-memory-barriers) :in :raw)
  (image-memory-barriers '(:struct %vk:image-memory-barrier) image-memory-barriers :in :list))

(defvk-simple-fun (cmd-pipeline-barrier
                   %vk:cmd-pipeline-barrier
                   "Represents <vkCmdPipelineBarrier>"
                   ((command-buffer cffi:foreign-pointer) (src-stage-mask (or unsigned-byte list)) (dst-stage-mask (or unsigned-byte list)) (memory-barriers list) (buffer-memory-barriers list) (image-memory-barriers list))
                   (((dependency-flags nil) (or unsigned-byte list)))
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (src-stage-mask '%vk:pipeline-stage-flags src-stage-mask :in :raw)
  (dst-stage-mask '%vk:pipeline-stage-flags dst-stage-mask :in :raw)
  (dependency-flags '%vk:dependency-flags dependency-flags :in :raw :optional)
  (memory-barrier-count :uint32 (length memory-barriers) :in :raw)
  (memory-barriers '(:struct %vk:memory-barrier) memory-barriers :in :list)
  (buffer-memory-barrier-count :uint32 (length buffer-memory-barriers) :in :raw)
  (buffer-memory-barriers '(:struct %vk:buffer-memory-barrier) buffer-memory-barriers :in :list)
  (image-memory-barrier-count :uint32 (length image-memory-barriers) :in :raw)
  (image-memory-barriers '(:struct %vk:image-memory-barrier) image-memory-barriers :in :list))

(defvk-simple-fun (cmd-begin-query
                   %vk:cmd-begin-query
                   "Represents <vkCmdBeginQuery>"
                   ((command-buffer cffi:foreign-pointer) (query-pool cffi:foreign-pointer) (query unsigned-byte))
                   (((flags nil) (or unsigned-byte list)))
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (query-pool '%vk:query-pool query-pool :in :handle)
  (query :uint32 query :in :raw)
  (flags '%vk:query-control-flags flags :in :raw :optional))

(defvk-simple-fun (cmd-end-query
                   %vk:cmd-end-query
                   "Represents <vkCmdEndQuery>"
                   ((command-buffer cffi:foreign-pointer) (query-pool cffi:foreign-pointer) (query unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (query-pool '%vk:query-pool query-pool :in :handle)
  (query :uint32 query :in :raw))

(defvk-simple-fun (cmd-begin-conditional-rendering-ext
                   %vk:cmd-begin-conditional-rendering-ext
                   "Represents <vkCmdBeginConditionalRenderingEXT>"
                   ((command-buffer cffi:foreign-pointer) (conditional-rendering-begin (or vk:conditional-rendering-begin-info-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (conditional-rendering-begin '(:struct %vk:conditional-rendering-begin-info-ext) conditional-rendering-begin :in))

(defvk-simple-fun (cmd-end-conditional-rendering-ext
                   %vk:cmd-end-conditional-rendering-ext
                   "Represents <vkCmdEndConditionalRenderingEXT>"
                   ((command-buffer cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle))

(defvk-simple-fun (cmd-reset-query-pool
                   %vk:cmd-reset-query-pool
                   "Represents <vkCmdResetQueryPool>"
                   ((command-buffer cffi:foreign-pointer) (query-pool cffi:foreign-pointer) (first-query unsigned-byte) (query-count unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (query-pool '%vk:query-pool query-pool :in :handle)
  (first-query :uint32 first-query :in :raw)
  (query-count :uint32 query-count :in :raw))

(defvk-simple-fun (cmd-write-timestamp
                   %vk:cmd-write-timestamp
                   "Represents <vkCmdWriteTimestamp>"
                   ((command-buffer cffi:foreign-pointer) (pipeline-stage keyword) (query-pool cffi:foreign-pointer) (query unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (pipeline-stage '%vk:pipeline-stage-flag-bits pipeline-stage :in :raw)
  (query-pool '%vk:query-pool query-pool :in :handle)
  (query :uint32 query :in :raw))

(defvk-simple-fun (cmd-copy-query-pool-results
                   %vk:cmd-copy-query-pool-results
                   "Represents <vkCmdCopyQueryPoolResults>"
                   ((command-buffer cffi:foreign-pointer) (query-pool cffi:foreign-pointer) (first-query unsigned-byte) (query-count unsigned-byte) (dst-buffer cffi:foreign-pointer) (dst-offset unsigned-byte) (stride unsigned-byte))
                   (((flags nil) (or unsigned-byte list)))
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (query-pool '%vk:query-pool query-pool :in :handle)
  (first-query :uint32 first-query :in :raw)
  (query-count :uint32 query-count :in :raw)
  (dst-buffer '%vk:buffer dst-buffer :in :handle)
  (dst-offset '%vk:device-size dst-offset :in :raw)
  (stride '%vk:device-size stride :in :raw)
  (flags '%vk:query-result-flags flags :in :raw :optional))

(defvk-simple-fun (cmd-push-constants
                   %vk:cmd-push-constants
                   "Represents <vkCmdPushConstants>"
                   ((command-buffer cffi:foreign-pointer) (layout cffi:foreign-pointer) (stage-flags (or unsigned-byte list)) (offset unsigned-byte) (size unsigned-byte) (values cffi:foreign-pointer))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (layout '%vk:pipeline-layout layout :in :handle)
  (stage-flags '%vk:shader-stage-flags stage-flags :in :raw)
  (offset :uint32 offset :in :raw)
  (size :uint32 size :in :raw)
  (values '(:pointer :void) values :in :handle))

(defvk-simple-fun (cmd-begin-render-pass
                   %vk:cmd-begin-render-pass
                   "Represents <vkCmdBeginRenderPass>"
                   ((command-buffer cffi:foreign-pointer) (render-pass-begin (or vk:render-pass-begin-info cffi:foreign-pointer)) (contents keyword))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (render-pass-begin '(:struct %vk:render-pass-begin-info) render-pass-begin :in)
  (contents '%vk:subpass-contents contents :in :raw))

(defvk-simple-fun (cmd-next-subpass
                   %vk:cmd-next-subpass
                   "Represents <vkCmdNextSubpass>"
                   ((command-buffer cffi:foreign-pointer) (contents keyword))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (contents '%vk:subpass-contents contents :in :raw))

(defvk-simple-fun (cmd-end-render-pass
                   %vk:cmd-end-render-pass
                   "Represents <vkCmdEndRenderPass>"
                   ((command-buffer cffi:foreign-pointer))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle))

(defvk-simple-fun (cmd-execute-commands
                   %vk:cmd-execute-commands
                   "Represents <vkCmdExecuteCommands>"
                   ((command-buffer cffi:foreign-pointer) (command-buffers list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (command-buffer-count :uint32 (length command-buffers) :in :raw)
  (command-buffers '%vk:command-buffer command-buffers :in :handle :list))

(defvk-create-handle-fun (create-android-surface-khr
                          %vk:create-android-surface-khr
                          "Represents <vkCreateAndroidSurfaceKHR>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:android-surface-create-info-khr cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:android-surface-create-info-khr) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-enumerate-fun (get-physical-device-display-properties-khr
                      %vk:get-physical-device-display-properties-khr
                      "Represents <vkGetPhysicalDeviceDisplayPropertiesKHR>"
                      ((physical-device cffi:foreign-pointer))
                      ()
                      property-count
                      properties
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:display-properties-khr) properties :out :list))

(defvk-enumerate-fun (get-physical-device-display-plane-properties-khr
                      %vk:get-physical-device-display-plane-properties-khr
                      "Represents <vkGetPhysicalDeviceDisplayPlanePropertiesKHR>"
                      ((physical-device cffi:foreign-pointer))
                      ()
                      property-count
                      properties
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:display-plane-properties-khr) properties :out :list))

(defvk-enumerate-fun (get-display-plane-supported-displays-khr
                      %vk:get-display-plane-supported-displays-khr
                      "Represents <vkGetDisplayPlaneSupportedDisplaysKHR>"
                      ((physical-device cffi:foreign-pointer) (plane-index unsigned-byte))
                      ()
                      display-count
                      displays
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (plane-index :uint32 plane-index :in :raw)
  (display-count :uint32 display-count :out)
  (displays '%vk:display-khr displays :out :handle :list))

(defvk-enumerate-fun (get-display-mode-properties-khr
                      %vk:get-display-mode-properties-khr
                      "Represents <vkGetDisplayModePropertiesKHR>"
                      ((physical-device cffi:foreign-pointer) (display cffi:foreign-pointer))
                      ()
                      property-count
                      properties
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (display '%vk:display-khr display :in :handle)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:display-mode-properties-khr) properties :out :list))

(defvk-create-handle-fun (create-display-mode-khr
                          %vk:create-display-mode-khr
                          "Represents <vkCreateDisplayModeKHR>"
                          ((physical-device cffi:foreign-pointer) (display cffi:foreign-pointer) (create-info (or vk:display-mode-create-info-khr cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (display '%vk:display-khr display :in :handle)
  (create-info '(:struct %vk:display-mode-create-info-khr) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (mode '%vk:display-mode-khr mode :out :handle))

(defvk-get-struct-fun (get-display-plane-capabilities-khr
                       %vk:get-display-plane-capabilities-khr
                       "Represents <vkGetDisplayPlaneCapabilitiesKHR>"
                       ((physical-device cffi:foreign-pointer) (mode cffi:foreign-pointer) (plane-index unsigned-byte))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (mode '%vk:display-mode-khr mode :in :handle)
  (plane-index :uint32 plane-index :in :raw)
  (capabilities '(:struct %vk:display-plane-capabilities-khr) capabilities :out))

(defvk-create-handle-fun (create-display-plane-surface-khr
                          %vk:create-display-plane-surface-khr
                          "Represents <vkCreateDisplayPlaneSurfaceKHR>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:display-surface-create-info-khr cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:display-surface-create-info-khr) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-create-handles-fun (create-shared-swapchains-khr
                           %vk:create-shared-swapchains-khr
                           "Represents <vkCreateSharedSwapchainsKHR>"
                           ((device cffi:foreign-pointer) (create-infos list))
                           (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                           (length create-infos))
  (device '%vk:device device :in :handle)
  (swapchain-count :uint32 (length create-infos) :in :raw)
  (create-infos '(:struct %vk:swapchain-create-info-khr) create-infos :in :list)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (swapchains '%vk:swapchain-khr swapchains :out :handle :list))

(defvk-simple-fun (destroy-surface-khr
                   %vk:destroy-surface-khr
                   "Represents <vkDestroySurfaceKHR>"
                   ((instance cffi:foreign-pointer))
                   (((surface (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (instance '%vk:instance instance :in :handle)
  (surface '%vk:surface-khr surface :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (get-physical-device-surface-support-khr
                          %vk:get-physical-device-surface-support-khr
                          "Represents <vkGetPhysicalDeviceSurfaceSupportKHR>"
                          ((physical-device cffi:foreign-pointer) (queue-family-index unsigned-byte) (surface cffi:foreign-pointer))
                          ()
                          nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (queue-family-index :uint32 queue-family-index :in :raw)
  (surface '%vk:surface-khr surface :in :handle)
  (supported '%vk:bool32 supported :out))

(defvk-get-struct-fun (get-physical-device-surface-capabilities-khr
                       %vk:get-physical-device-surface-capabilities-khr
                       "Represents <vkGetPhysicalDeviceSurfaceCapabilitiesKHR>"
                       ((physical-device cffi:foreign-pointer) (surface cffi:foreign-pointer))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (surface '%vk:surface-khr surface :in :handle)
  (surface-capabilities '(:struct %vk:surface-capabilities-khr) surface-capabilities :out))

(defvk-enumerate-fun (get-physical-device-surface-formats-khr
                      %vk:get-physical-device-surface-formats-khr
                      "Represents <vkGetPhysicalDeviceSurfaceFormatsKHR>"
                      ((physical-device cffi:foreign-pointer) (surface cffi:foreign-pointer))
                      ()
                      surface-format-count
                      surface-formats
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (surface '%vk:surface-khr surface :in :handle)
  (surface-format-count :uint32 surface-format-count :out)
  (surface-formats '(:struct %vk:surface-format-khr) surface-formats :out :list))

(defvk-enumerate-fun (get-physical-device-surface-present-modes-khr
                      %vk:get-physical-device-surface-present-modes-khr
                      "Represents <vkGetPhysicalDeviceSurfacePresentModesKHR>"
                      ((physical-device cffi:foreign-pointer) (surface cffi:foreign-pointer))
                      ()
                      present-mode-count
                      present-modes
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (surface '%vk:surface-khr surface :in :handle)
  (present-mode-count :uint32 present-mode-count :out)
  (present-modes '%vk:present-mode-khr present-modes :out :raw :list))

(defvk-create-handle-fun (create-swapchain-khr
                          %vk:create-swapchain-khr
                          "Represents <vkCreateSwapchainKHR>"
                          ((device cffi:foreign-pointer) (create-info (or vk:swapchain-create-info-khr cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:swapchain-create-info-khr) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (swapchain '%vk:swapchain-khr swapchain :out :handle))

(defvk-simple-fun (destroy-swapchain-khr
                   %vk:destroy-swapchain-khr
                   "Represents <vkDestroySwapchainKHR>"
                   ((device cffi:foreign-pointer))
                   (((swapchain (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (swapchain '%vk:swapchain-khr swapchain :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-enumerate-fun (get-swapchain-images-khr
                      %vk:get-swapchain-images-khr
                      "Represents <vkGetSwapchainImagesKHR>"
                      ((device cffi:foreign-pointer) (swapchain cffi:foreign-pointer))
                      ()
                      swapchain-image-count
                      swapchain-images
                      nil)
  (device '%vk:device device :in :handle)
  (swapchain '%vk:swapchain-khr swapchain :in :handle)
  (swapchain-image-count :uint32 swapchain-image-count :out)
  (swapchain-images '%vk:image swapchain-images :out :handle :list))

(defvk-create-handle-fun (acquire-next-image-khr
                          %vk:acquire-next-image-khr
                          "Represents <vkAcquireNextImageKHR>"
                          ((device cffi:foreign-pointer) (swapchain cffi:foreign-pointer) (timeout unsigned-byte))
                          (((semaphore (cffi:null-pointer)) cffi:foreign-pointer) ((fence (cffi:null-pointer)) cffi:foreign-pointer))
                          nil)
  (device '%vk:device device :in :handle)
  (swapchain '%vk:swapchain-khr swapchain :in :handle)
  (timeout :uint64 timeout :in :raw)
  (semaphore '%vk:semaphore semaphore :in :handle :optional)
  (fence '%vk:fence fence :in :handle :optional)
  (image-index :uint32 image-index :out))

(defvk-simple-fun (queue-present-khr
                   %vk:queue-present-khr
                   "Represents <vkQueuePresentKHR>"
                   ((queue cffi:foreign-pointer) (present-info (or vk:present-info-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (queue '%vk:queue queue :in :handle)
  (present-info '(:struct %vk:present-info-khr) present-info :in))

(defvk-create-handle-fun (create-vi-surface-nn
                          %vk:create-vi-surface-nn
                          "Represents <vkCreateViSurfaceNN>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:vi-surface-create-info-nn cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:vi-surface-create-info-nn) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-create-handle-fun (create-wayland-surface-khr
                          %vk:create-wayland-surface-khr
                          "Represents <vkCreateWaylandSurfaceKHR>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:wayland-surface-create-info-khr cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:wayland-surface-create-info-khr) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-simple-fun (get-physical-device-wayland-presentation-support-khr
                   %vk:get-physical-device-wayland-presentation-support-khr
                   "Represents <vkGetPhysicalDeviceWaylandPresentationSupportKHR>"
                   ((physical-device cffi:foreign-pointer) (queue-family-index unsigned-byte) (display cffi:foreign-pointer))
                   ()
                  nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (queue-family-index :uint32 queue-family-index :in :raw)
  (display '(:pointer :void) display :in :handle))

(defvk-create-handle-fun (create-win32-surface-khr
                          %vk:create-win32-surface-khr
                          "Represents <vkCreateWin32SurfaceKHR>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:win32-surface-create-info-khr cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:win32-surface-create-info-khr) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-simple-fun (get-physical-device-win32-presentation-support-khr
                   %vk:get-physical-device-win32-presentation-support-khr
                   "Represents <vkGetPhysicalDeviceWin32PresentationSupportKHR>"
                   ((physical-device cffi:foreign-pointer) (queue-family-index unsigned-byte))
                   ()
                  nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (queue-family-index :uint32 queue-family-index :in :raw))

(defvk-create-handle-fun (create-xlib-surface-khr
                          %vk:create-xlib-surface-khr
                          "Represents <vkCreateXlibSurfaceKHR>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:xlib-surface-create-info-khr cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:xlib-surface-create-info-khr) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-simple-fun (get-physical-device-xlib-presentation-support-khr
                   %vk:get-physical-device-xlib-presentation-support-khr
                   "Represents <vkGetPhysicalDeviceXlibPresentationSupportKHR>"
                   ((physical-device cffi:foreign-pointer) (queue-family-index unsigned-byte) (dpy cffi:foreign-pointer) (visual-id cffi:foreign-pointer))
                   ()
                  nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (queue-family-index :uint32 queue-family-index :in :raw)
  (dpy '(:pointer :void) dpy :in :handle)
  (visual-id '(:pointer :void) visual-id :in :handle))

(defvk-create-handle-fun (create-xcb-surface-khr
                          %vk:create-xcb-surface-khr
                          "Represents <vkCreateXcbSurfaceKHR>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:xcb-surface-create-info-khr cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:xcb-surface-create-info-khr) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-simple-fun (get-physical-device-xcb-presentation-support-khr
                   %vk:get-physical-device-xcb-presentation-support-khr
                   "Represents <vkGetPhysicalDeviceXcbPresentationSupportKHR>"
                   ((physical-device cffi:foreign-pointer) (queue-family-index unsigned-byte) (connection cffi:foreign-pointer) (visual_id cffi:foreign-pointer))
                   ()
                  nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (queue-family-index :uint32 queue-family-index :in :raw)
  (connection '(:pointer :void) connection :in :handle)
  (visual_id '(:pointer :void) visual_id :in :handle))

(defvk-create-handle-fun (create-direct-fb-surface-ext
                          %vk:create-direct-fb-surface-ext
                          "Represents <vkCreateDirectFBSurfaceEXT>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:direct-fb-surface-create-info-ext cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:direct-fb-surface-create-info-ext) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-simple-fun (get-physical-device-direct-fb-presentation-support-ext
                   %vk:get-physical-device-direct-fb-presentation-support-ext
                   "Represents <vkGetPhysicalDeviceDirectFBPresentationSupportEXT>"
                   ((physical-device cffi:foreign-pointer) (queue-family-index unsigned-byte) (dfb cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (queue-family-index :uint32 queue-family-index :in :raw)
  (dfb '(:pointer :void) dfb :in :handle))

(defvk-create-handle-fun (create-image-pipe-surface-fuchsia
                          %vk:create-image-pipe-surface-fuchsia
                          "Represents <vkCreateImagePipeSurfaceFUCHSIA>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:image-pipe-surface-create-info-fuchsia cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:image-pipe-surface-create-info-fuchsia) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-create-handle-fun (create-stream-descriptor-surface-ggp
                          %vk:create-stream-descriptor-surface-ggp
                          "Represents <vkCreateStreamDescriptorSurfaceGGP>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:stream-descriptor-surface-create-info-ggp cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:stream-descriptor-surface-create-info-ggp) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-create-handle-fun (create-debug-report-callback-ext
                          %vk:create-debug-report-callback-ext
                          "Represents <vkCreateDebugReportCallbackEXT>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:debug-report-callback-create-info-ext cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:debug-report-callback-create-info-ext) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (callback '%vk:debug-report-callback-ext callback :out :handle))

(defvk-simple-fun (destroy-debug-report-callback-ext
                   %vk:destroy-debug-report-callback-ext
                   "Represents <vkDestroyDebugReportCallbackEXT>"
                   ((instance cffi:foreign-pointer))
                   (((callback (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil
                  t)
  (instance '%vk:instance instance :in :handle)
  (callback '%vk:debug-report-callback-ext callback :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (debug-report-message-ext
                   %vk:debug-report-message-ext
                   "Represents <vkDebugReportMessageEXT>"
                   ((instance cffi:foreign-pointer) (flags (or unsigned-byte list)) (object-type keyword) (object unsigned-byte) (location unsigned-byte) (message-code integer) (layer-prefix string) (message string))
                   ()
                  nil
                  t)
  (instance '%vk:instance instance :in :handle)
  (flags '%vk:debug-report-flags-ext flags :in :raw)
  (object-type '%vk:debug-report-object-type-ext object-type :in :raw)
  (object :uint64 object :in :raw)
  (location '%vk:size-t location :in :raw)
  (message-code :int32 message-code :in :raw)
  (layer-prefix :string layer-prefix :in :raw)
  (message :string message :in :raw))

(defvk-simple-fun (debug-marker-set-object-name-ext
                   %vk:debug-marker-set-object-name-ext
                   "Represents <vkDebugMarkerSetObjectNameEXT>"
                   ((device cffi:foreign-pointer) (name-info (or vk:debug-marker-object-name-info-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (name-info '(:struct %vk:debug-marker-object-name-info-ext) name-info :in))

(defvk-simple-fun (debug-marker-set-object-tag-ext
                   %vk:debug-marker-set-object-tag-ext
                   "Represents <vkDebugMarkerSetObjectTagEXT>"
                   ((device cffi:foreign-pointer) (tag-info (or vk:debug-marker-object-tag-info-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (tag-info '(:struct %vk:debug-marker-object-tag-info-ext) tag-info :in))

(defvk-simple-fun (cmd-debug-marker-begin-ext
                   %vk:cmd-debug-marker-begin-ext
                   "Represents <vkCmdDebugMarkerBeginEXT>"
                   ((command-buffer cffi:foreign-pointer) (marker-info (or vk:debug-marker-marker-info-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (marker-info '(:struct %vk:debug-marker-marker-info-ext) marker-info :in))

(defvk-simple-fun (cmd-debug-marker-end-ext
                   %vk:cmd-debug-marker-end-ext
                   "Represents <vkCmdDebugMarkerEndEXT>"
                   ((command-buffer cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle))

(defvk-simple-fun (cmd-debug-marker-insert-ext
                   %vk:cmd-debug-marker-insert-ext
                   "Represents <vkCmdDebugMarkerInsertEXT>"
                   ((command-buffer cffi:foreign-pointer) (marker-info (or vk:debug-marker-marker-info-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (marker-info '(:struct %vk:debug-marker-marker-info-ext) marker-info :in))

(defvk-get-struct-fun (get-physical-device-external-image-format-properties-nv
                       %vk:get-physical-device-external-image-format-properties-nv
                       "Represents <vkGetPhysicalDeviceExternalImageFormatPropertiesNV>"
                       ((physical-device cffi:foreign-pointer) (format keyword) (type keyword) (tiling keyword) (usage (or unsigned-byte list)))
                       (((flags nil) (or unsigned-byte list)) ((external-handle-type nil) (or unsigned-byte list)))
                       t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (format '%vk:format format :in :raw)
  (type '%vk:image-type type :in :raw)
  (tiling '%vk:image-tiling tiling :in :raw)
  (usage '%vk:image-usage-flags usage :in :raw)
  (flags '%vk:image-create-flags flags :in :raw :optional)
  (external-handle-type '%vk:external-memory-handle-type-flags-nv external-handle-type :in :raw :optional)
  (external-image-format-properties '(:struct %vk:external-image-format-properties-nv) external-image-format-properties :out))

(defvk-get-struct-fun (get-memory-win32-handle-nv
                       %vk:get-memory-win32-handle-nv
                       "Represents <vkGetMemoryWin32HandleNV>"
                       ((device cffi:foreign-pointer) (memory cffi:foreign-pointer) (handle-type (or unsigned-byte list)))
                       ()
                       t)
  (device '%vk:device device :in :handle)
  (memory '%vk:device-memory memory :in :handle)
  (handle-type '%vk:external-memory-handle-type-flags-nv handle-type :in :raw)
  (handle '(:pointer :void) handle :out :handle))

(defvk-simple-fun (cmd-execute-generated-commands-nv
                   %vk:cmd-execute-generated-commands-nv
                   "Represents <vkCmdExecuteGeneratedCommandsNV>"
                   ((command-buffer cffi:foreign-pointer) (is-preprocessed boolean) (generated-commands-info (or vk:generated-commands-info-nv cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (is-preprocessed '%vk:bool32 is-preprocessed :in :raw)
  (generated-commands-info '(:struct %vk:generated-commands-info-nv) generated-commands-info :in))

(defvk-simple-fun (cmd-preprocess-generated-commands-nv
                   %vk:cmd-preprocess-generated-commands-nv
                   "Represents <vkCmdPreprocessGeneratedCommandsNV>"
                   ((command-buffer cffi:foreign-pointer) (generated-commands-info (or vk:generated-commands-info-nv cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (generated-commands-info '(:struct %vk:generated-commands-info-nv) generated-commands-info :in))

(defvk-simple-fun (cmd-bind-pipeline-shader-group-nv
                   %vk:cmd-bind-pipeline-shader-group-nv
                   "Represents <vkCmdBindPipelineShaderGroupNV>"
                   ((command-buffer cffi:foreign-pointer) (pipeline-bind-point keyword) (pipeline cffi:foreign-pointer) (group-index unsigned-byte))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (pipeline-bind-point '%vk:pipeline-bind-point pipeline-bind-point :in :raw)
  (pipeline '%vk:pipeline pipeline :in :handle)
  (group-index :uint32 group-index :in :raw))

(defvk-get-struct-fun (get-generated-commands-memory-requirements-nv
                       %vk:get-generated-commands-memory-requirements-nv
                       "Represents <vkGetGeneratedCommandsMemoryRequirementsNV>"
                       ((device cffi:foreign-pointer) (info (or vk:generated-commands-memory-requirements-info-nv cffi:foreign-pointer)))
                       ()
                       t)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:generated-commands-memory-requirements-info-nv) info :in)
  (memory-requirements '(:struct %vk:memory-requirements-2) memory-requirements :out))

(defvk-create-handle-fun (create-indirect-commands-layout-nv
                          %vk:create-indirect-commands-layout-nv
                          "Represents <vkCreateIndirectCommandsLayoutNV>"
                          ((device cffi:foreign-pointer) (create-info (or vk:indirect-commands-layout-create-info-nv cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:indirect-commands-layout-create-info-nv) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (indirect-commands-layout '%vk:indirect-commands-layout-nv indirect-commands-layout :out :handle))

(defvk-simple-fun (destroy-indirect-commands-layout-nv
                   %vk:destroy-indirect-commands-layout-nv
                   "Represents <vkDestroyIndirectCommandsLayoutNV>"
                   ((device cffi:foreign-pointer))
                   (((indirect-commands-layout (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (indirect-commands-layout '%vk:indirect-commands-layout-nv indirect-commands-layout :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-get-struct-fun (get-physical-device-features-2
                       %vk:get-physical-device-features-2
                       "Represents <vkGetPhysicalDeviceFeatures2>"
                       ((physical-device cffi:foreign-pointer))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (features '(:struct %vk:physical-device-features-2) features :out))

(defvk-get-struct-fun (get-physical-device-features-2-khr
                       %vk:get-physical-device-features-2-khr
                       "Represents <vkGetPhysicalDeviceFeatures2KHR>"
                       ((physical-device cffi:foreign-pointer))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (features '(:struct %vk:physical-device-features-2) features :out))

(defvk-get-struct-fun (get-physical-device-properties-2
                       %vk:get-physical-device-properties-2
                       "Represents <vkGetPhysicalDeviceProperties2>"
                       ((physical-device cffi:foreign-pointer))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (properties '(:struct %vk:physical-device-properties-2) properties :out))

(defvk-get-struct-fun (get-physical-device-properties-2-khr
                       %vk:get-physical-device-properties-2-khr
                       "Represents <vkGetPhysicalDeviceProperties2KHR>"
                       ((physical-device cffi:foreign-pointer))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (properties '(:struct %vk:physical-device-properties-2) properties :out))

(defvk-get-struct-fun (get-physical-device-format-properties-2
                       %vk:get-physical-device-format-properties-2
                       "Represents <vkGetPhysicalDeviceFormatProperties2>"
                       ((physical-device cffi:foreign-pointer) (format keyword))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (format '%vk:format format :in :raw)
  (format-properties '(:struct %vk:format-properties-2) format-properties :out))

(defvk-get-struct-fun (get-physical-device-format-properties-2-khr
                       %vk:get-physical-device-format-properties-2-khr
                       "Represents <vkGetPhysicalDeviceFormatProperties2KHR>"
                       ((physical-device cffi:foreign-pointer) (format keyword))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (format '%vk:format format :in :raw)
  (format-properties '(:struct %vk:format-properties-2) format-properties :out))

(defvk-get-struct-fun (get-physical-device-image-format-properties-2
                       %vk:get-physical-device-image-format-properties-2
                       "Represents <vkGetPhysicalDeviceImageFormatProperties2>"
                       ((physical-device cffi:foreign-pointer) (image-format-info (or vk:physical-device-image-format-info-2 cffi:foreign-pointer)))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (image-format-info '(:struct %vk:physical-device-image-format-info-2) image-format-info :in)
  (image-format-properties '(:struct %vk:image-format-properties-2) image-format-properties :out))

(defvk-get-struct-fun (get-physical-device-image-format-properties-2-khr
                       %vk:get-physical-device-image-format-properties-2-khr
                       "Represents <vkGetPhysicalDeviceImageFormatProperties2KHR>"
                       ((physical-device cffi:foreign-pointer) (image-format-info (or vk:physical-device-image-format-info-2 cffi:foreign-pointer)))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (image-format-info '(:struct %vk:physical-device-image-format-info-2) image-format-info :in)
  (image-format-properties '(:struct %vk:image-format-properties-2) image-format-properties :out))

(defvk-get-structs-fun (get-physical-device-queue-family-properties-2
                        %vk:get-physical-device-queue-family-properties-2
                        "Represents <vkGetPhysicalDeviceQueueFamilyProperties2>"
                        ((physical-device cffi:foreign-pointer))
                        ()
                        queue-family-property-count
                        queue-family-properties
                      t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (queue-family-property-count :uint32 queue-family-property-count :out)
  (queue-family-properties '(:struct %vk:queue-family-properties-2) queue-family-properties :out :list))

(defvk-get-structs-fun (get-physical-device-queue-family-properties-2-khr
                        %vk:get-physical-device-queue-family-properties-2-khr
                        "Represents <vkGetPhysicalDeviceQueueFamilyProperties2KHR>"
                        ((physical-device cffi:foreign-pointer))
                        ()
                        queue-family-property-count
                        queue-family-properties
                      t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (queue-family-property-count :uint32 queue-family-property-count :out)
  (queue-family-properties '(:struct %vk:queue-family-properties-2) queue-family-properties :out :list))

(defvk-get-struct-fun (get-physical-device-memory-properties-2
                       %vk:get-physical-device-memory-properties-2
                       "Represents <vkGetPhysicalDeviceMemoryProperties2>"
                       ((physical-device cffi:foreign-pointer))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (memory-properties '(:struct %vk:physical-device-memory-properties-2) memory-properties :out))

(defvk-get-struct-fun (get-physical-device-memory-properties-2-khr
                       %vk:get-physical-device-memory-properties-2-khr
                       "Represents <vkGetPhysicalDeviceMemoryProperties2KHR>"
                       ((physical-device cffi:foreign-pointer))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (memory-properties '(:struct %vk:physical-device-memory-properties-2) memory-properties :out))

(defvk-get-structs-fun (get-physical-device-sparse-image-format-properties-2
                        %vk:get-physical-device-sparse-image-format-properties-2
                        "Represents <vkGetPhysicalDeviceSparseImageFormatProperties2>"
                        ((physical-device cffi:foreign-pointer) (format-info (or vk:physical-device-sparse-image-format-info-2 cffi:foreign-pointer)))
                        ()
                        property-count
                        properties
                      t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (format-info '(:struct %vk:physical-device-sparse-image-format-info-2) format-info :in)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:sparse-image-format-properties-2) properties :out :list))

(defvk-get-structs-fun (get-physical-device-sparse-image-format-properties-2-khr
                        %vk:get-physical-device-sparse-image-format-properties-2-khr
                        "Represents <vkGetPhysicalDeviceSparseImageFormatProperties2KHR>"
                        ((physical-device cffi:foreign-pointer) (format-info (or vk:physical-device-sparse-image-format-info-2 cffi:foreign-pointer)))
                        ()
                        property-count
                        properties
                      t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (format-info '(:struct %vk:physical-device-sparse-image-format-info-2) format-info :in)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:sparse-image-format-properties-2) properties :out :list))

(defvk-simple-fun (cmd-push-descriptor-set-khr
                   %vk:cmd-push-descriptor-set-khr
                   "Represents <vkCmdPushDescriptorSetKHR>"
                   ((command-buffer cffi:foreign-pointer) (pipeline-bind-point keyword) (layout cffi:foreign-pointer) (set unsigned-byte) (descriptor-writes list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (pipeline-bind-point '%vk:pipeline-bind-point pipeline-bind-point :in :raw)
  (layout '%vk:pipeline-layout layout :in :handle)
  (set :uint32 set :in :raw)
  (descriptor-write-count :uint32 (length descriptor-writes) :in :raw)
  (descriptor-writes '(:struct %vk:write-descriptor-set) descriptor-writes :in :list))

(defvk-simple-fun (trim-command-pool
                   %vk:trim-command-pool
                   "Represents <vkTrimCommandPool>"
                   ((device cffi:foreign-pointer) (command-pool cffi:foreign-pointer))
                   (((flags nil) (or unsigned-byte list)))
                  nil)
  (device '%vk:device device :in :handle)
  (command-pool '%vk:command-pool command-pool :in :handle)
  (flags '%vk:command-pool-trim-flags flags :in :raw :optional))

(defvk-simple-fun (trim-command-pool-khr
                   %vk:trim-command-pool-khr
                   "Represents <vkTrimCommandPoolKHR>"
                   ((device cffi:foreign-pointer) (command-pool cffi:foreign-pointer))
                   (((flags nil) (or unsigned-byte list)))
                  nil)
  (device '%vk:device device :in :handle)
  (command-pool '%vk:command-pool command-pool :in :handle)
  (flags '%vk:command-pool-trim-flags flags :in :raw :optional))

(defvk-get-struct-fun (get-physical-device-external-buffer-properties
                       %vk:get-physical-device-external-buffer-properties
                       "Represents <vkGetPhysicalDeviceExternalBufferProperties>"
                       ((physical-device cffi:foreign-pointer) (external-buffer-info (or vk:physical-device-external-buffer-info cffi:foreign-pointer)))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (external-buffer-info '(:struct %vk:physical-device-external-buffer-info) external-buffer-info :in)
  (external-buffer-properties '(:struct %vk:external-buffer-properties) external-buffer-properties :out))

(defvk-get-struct-fun (get-physical-device-external-buffer-properties-khr
                       %vk:get-physical-device-external-buffer-properties-khr
                       "Represents <vkGetPhysicalDeviceExternalBufferPropertiesKHR>"
                       ((physical-device cffi:foreign-pointer) (external-buffer-info (or vk:physical-device-external-buffer-info cffi:foreign-pointer)))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (external-buffer-info '(:struct %vk:physical-device-external-buffer-info) external-buffer-info :in)
  (external-buffer-properties '(:struct %vk:external-buffer-properties) external-buffer-properties :out))

(defvk-get-struct-fun (get-memory-win32-handle-khr
                       %vk:get-memory-win32-handle-khr
                       "Represents <vkGetMemoryWin32HandleKHR>"
                       ((device cffi:foreign-pointer) (get-win32-handle-info (or vk:memory-get-win32-handle-info-khr cffi:foreign-pointer)))
                       ())
  (device '%vk:device device :in :handle)
  (get-win32-handle-info '(:struct %vk:memory-get-win32-handle-info-khr) get-win32-handle-info :in)
  (handle '(:pointer :void) handle :out :handle))

(defvk-get-struct-fun (get-memory-win32-handle-properties-khr
                       %vk:get-memory-win32-handle-properties-khr
                       "Represents <vkGetMemoryWin32HandlePropertiesKHR>"
                       ((device cffi:foreign-pointer) (handle-type keyword) (handle cffi:foreign-pointer))
                       ())
  (device '%vk:device device :in :handle)
  (handle-type '%vk:external-memory-handle-type-flag-bits handle-type :in :raw)
  (handle '(:pointer :void) handle :in :handle)
  (memory-win32-handle-properties '(:struct %vk:memory-win32-handle-properties-khr) memory-win32-handle-properties :out))

(defvk-create-handle-fun (get-memory-fd-khr
                          %vk:get-memory-fd-khr
                          "Represents <vkGetMemoryFdKHR>"
                          ((device cffi:foreign-pointer) (get-fd-info (or vk:memory-get-fd-info-khr cffi:foreign-pointer)))
                          ()
                          nil)
  (device '%vk:device device :in :handle)
  (get-fd-info '(:struct %vk:memory-get-fd-info-khr) get-fd-info :in)
  (fd :int fd :out))

(defvk-get-struct-fun (get-memory-fd-properties-khr
                       %vk:get-memory-fd-properties-khr
                       "Represents <vkGetMemoryFdPropertiesKHR>"
                       ((device cffi:foreign-pointer) (handle-type keyword) (fd integer))
                       ())
  (device '%vk:device device :in :handle)
  (handle-type '%vk:external-memory-handle-type-flag-bits handle-type :in :raw)
  (fd :int fd :in :raw)
  (memory-fd-properties '(:struct %vk:memory-fd-properties-khr) memory-fd-properties :out))

(defvk-get-struct-fun (get-physical-device-external-semaphore-properties
                       %vk:get-physical-device-external-semaphore-properties
                       "Represents <vkGetPhysicalDeviceExternalSemaphoreProperties>"
                       ((physical-device cffi:foreign-pointer) (external-semaphore-info (or vk:physical-device-external-semaphore-info cffi:foreign-pointer)))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (external-semaphore-info '(:struct %vk:physical-device-external-semaphore-info) external-semaphore-info :in)
  (external-semaphore-properties '(:struct %vk:external-semaphore-properties) external-semaphore-properties :out))

(defvk-get-struct-fun (get-physical-device-external-semaphore-properties-khr
                       %vk:get-physical-device-external-semaphore-properties-khr
                       "Represents <vkGetPhysicalDeviceExternalSemaphorePropertiesKHR>"
                       ((physical-device cffi:foreign-pointer) (external-semaphore-info (or vk:physical-device-external-semaphore-info cffi:foreign-pointer)))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (external-semaphore-info '(:struct %vk:physical-device-external-semaphore-info) external-semaphore-info :in)
  (external-semaphore-properties '(:struct %vk:external-semaphore-properties) external-semaphore-properties :out))

(defvk-get-struct-fun (get-semaphore-win32-handle-khr
                       %vk:get-semaphore-win32-handle-khr
                       "Represents <vkGetSemaphoreWin32HandleKHR>"
                       ((device cffi:foreign-pointer) (get-win32-handle-info (or vk:semaphore-get-win32-handle-info-khr cffi:foreign-pointer)))
                       ())
  (device '%vk:device device :in :handle)
  (get-win32-handle-info '(:struct %vk:semaphore-get-win32-handle-info-khr) get-win32-handle-info :in)
  (handle '(:pointer :void) handle :out :handle))

(defvk-simple-fun (import-semaphore-win32-handle-khr
                   %vk:import-semaphore-win32-handle-khr
                   "Represents <vkImportSemaphoreWin32HandleKHR>"
                   ((device cffi:foreign-pointer) (import-semaphore-win32-handle-info (or vk:import-semaphore-win32-handle-info-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (import-semaphore-win32-handle-info '(:struct %vk:import-semaphore-win32-handle-info-khr) import-semaphore-win32-handle-info :in))

(defvk-create-handle-fun (get-semaphore-fd-khr
                          %vk:get-semaphore-fd-khr
                          "Represents <vkGetSemaphoreFdKHR>"
                          ((device cffi:foreign-pointer) (get-fd-info (or vk:semaphore-get-fd-info-khr cffi:foreign-pointer)))
                          ()
                          nil)
  (device '%vk:device device :in :handle)
  (get-fd-info '(:struct %vk:semaphore-get-fd-info-khr) get-fd-info :in)
  (fd :int fd :out))

(defvk-simple-fun (import-semaphore-fd-khr
                   %vk:import-semaphore-fd-khr
                   "Represents <vkImportSemaphoreFdKHR>"
                   ((device cffi:foreign-pointer) (import-semaphore-fd-info (or vk:import-semaphore-fd-info-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (import-semaphore-fd-info '(:struct %vk:import-semaphore-fd-info-khr) import-semaphore-fd-info :in))

(defvk-get-struct-fun (get-physical-device-external-fence-properties
                       %vk:get-physical-device-external-fence-properties
                       "Represents <vkGetPhysicalDeviceExternalFenceProperties>"
                       ((physical-device cffi:foreign-pointer) (external-fence-info (or vk:physical-device-external-fence-info cffi:foreign-pointer)))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (external-fence-info '(:struct %vk:physical-device-external-fence-info) external-fence-info :in)
  (external-fence-properties '(:struct %vk:external-fence-properties) external-fence-properties :out))

(defvk-get-struct-fun (get-physical-device-external-fence-properties-khr
                       %vk:get-physical-device-external-fence-properties-khr
                       "Represents <vkGetPhysicalDeviceExternalFencePropertiesKHR>"
                       ((physical-device cffi:foreign-pointer) (external-fence-info (or vk:physical-device-external-fence-info cffi:foreign-pointer)))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (external-fence-info '(:struct %vk:physical-device-external-fence-info) external-fence-info :in)
  (external-fence-properties '(:struct %vk:external-fence-properties) external-fence-properties :out))

(defvk-get-struct-fun (get-fence-win32-handle-khr
                       %vk:get-fence-win32-handle-khr
                       "Represents <vkGetFenceWin32HandleKHR>"
                       ((device cffi:foreign-pointer) (get-win32-handle-info (or vk:fence-get-win32-handle-info-khr cffi:foreign-pointer)))
                       ())
  (device '%vk:device device :in :handle)
  (get-win32-handle-info '(:struct %vk:fence-get-win32-handle-info-khr) get-win32-handle-info :in)
  (handle '(:pointer :void) handle :out :handle))

(defvk-simple-fun (import-fence-win32-handle-khr
                   %vk:import-fence-win32-handle-khr
                   "Represents <vkImportFenceWin32HandleKHR>"
                   ((device cffi:foreign-pointer) (import-fence-win32-handle-info (or vk:import-fence-win32-handle-info-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (import-fence-win32-handle-info '(:struct %vk:import-fence-win32-handle-info-khr) import-fence-win32-handle-info :in))

(defvk-create-handle-fun (get-fence-fd-khr
                          %vk:get-fence-fd-khr
                          "Represents <vkGetFenceFdKHR>"
                          ((device cffi:foreign-pointer) (get-fd-info (or vk:fence-get-fd-info-khr cffi:foreign-pointer)))
                          ()
                          nil)
  (device '%vk:device device :in :handle)
  (get-fd-info '(:struct %vk:fence-get-fd-info-khr) get-fd-info :in)
  (fd :int fd :out))

(defvk-simple-fun (import-fence-fd-khr
                   %vk:import-fence-fd-khr
                   "Represents <vkImportFenceFdKHR>"
                   ((device cffi:foreign-pointer) (import-fence-fd-info (or vk:import-fence-fd-info-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (import-fence-fd-info '(:struct %vk:import-fence-fd-info-khr) import-fence-fd-info :in))

(defvk-simple-fun (release-display-ext
                   %vk:release-display-ext
                   "Represents <vkReleaseDisplayEXT>"
                   ((physical-device cffi:foreign-pointer) (display cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (display '%vk:display-khr display :in :handle))

(defvk-simple-fun (acquire-xlib-display-ext
                   %vk:acquire-xlib-display-ext
                   "Represents <vkAcquireXlibDisplayEXT>"
                   ((physical-device cffi:foreign-pointer) (dpy cffi:foreign-pointer) (display cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (dpy '(:pointer :void) dpy :in :handle)
  (display '%vk:display-khr display :in :handle))

(defvk-create-handle-fun (get-rand-r-output-display-ext
                          %vk:get-rand-r-output-display-ext
                          "Represents <vkGetRandROutputDisplayEXT>"
                          ((physical-device cffi:foreign-pointer) (dpy cffi:foreign-pointer) (rr-output cffi:foreign-pointer))
                          ()
                          nil
                          t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (dpy '(:pointer :void) dpy :in :handle)
  (rr-output '(:pointer :void) rr-output :in :handle)
  (display '%vk:display-khr display :out :handle))

(defvk-simple-fun (display-power-control-ext
                   %vk:display-power-control-ext
                   "Represents <vkDisplayPowerControlEXT>"
                   ((device cffi:foreign-pointer) (display cffi:foreign-pointer) (display-power-info (or vk:display-power-info-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (display '%vk:display-khr display :in :handle)
  (display-power-info '(:struct %vk:display-power-info-ext) display-power-info :in))

(defvk-create-handle-fun (register-device-event-ext
                          %vk:register-device-event-ext
                          "Represents <vkRegisterDeviceEventEXT>"
                          ((device cffi:foreign-pointer) (device-event-info (or vk:device-event-info-ext cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (device '%vk:device device :in :handle)
  (device-event-info '(:struct %vk:device-event-info-ext) device-event-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (fence '%vk:fence fence :out :handle))

(defvk-create-handle-fun (register-display-event-ext
                          %vk:register-display-event-ext
                          "Represents <vkRegisterDisplayEventEXT>"
                          ((device cffi:foreign-pointer) (display cffi:foreign-pointer) (display-event-info (or vk:display-event-info-ext cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (device '%vk:device device :in :handle)
  (display '%vk:display-khr display :in :handle)
  (display-event-info '(:struct %vk:display-event-info-ext) display-event-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (fence '%vk:fence fence :out :handle))

(defvk-create-handle-fun (get-swapchain-counter-ext
                          %vk:get-swapchain-counter-ext
                          "Represents <vkGetSwapchainCounterEXT>"
                          ((device cffi:foreign-pointer) (swapchain cffi:foreign-pointer) (counter keyword))
                          ()
                          nil
                          t)
  (device '%vk:device device :in :handle)
  (swapchain '%vk:swapchain-khr swapchain :in :handle)
  (counter '%vk:surface-counter-flag-bits-ext counter :in :raw)
  (counter-value :uint64 counter-value :out))

(defvk-get-struct-fun (get-physical-device-surface-capabilities-2-ext
                       %vk:get-physical-device-surface-capabilities-2-ext
                       "Represents <vkGetPhysicalDeviceSurfaceCapabilities2EXT>"
                       ((physical-device cffi:foreign-pointer) (surface cffi:foreign-pointer))
                       ()
                       t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (surface '%vk:surface-khr surface :in :handle)
  (surface-capabilities '(:struct %vk:surface-capabilities-2-ext) surface-capabilities :out))

(defvk-enumerate-fun (enumerate-physical-device-groups
                      %vk:enumerate-physical-device-groups
                      "Represents <vkEnumeratePhysicalDeviceGroups>"
                      ((instance cffi:foreign-pointer))
                      ()
                      physical-device-group-count
                      physical-device-group-properties
                      nil)
  (instance '%vk:instance instance :in :handle)
  (physical-device-group-count :uint32 physical-device-group-count :out)
  (physical-device-group-properties '(:struct %vk:physical-device-group-properties) physical-device-group-properties :out :list))

(defvk-enumerate-fun (enumerate-physical-device-groups-khr
                      %vk:enumerate-physical-device-groups-khr
                      "Represents <vkEnumeratePhysicalDeviceGroupsKHR>"
                      ((instance cffi:foreign-pointer))
                      ()
                      physical-device-group-count
                      physical-device-group-properties
                      nil)
  (instance '%vk:instance instance :in :handle)
  (physical-device-group-count :uint32 physical-device-group-count :out)
  (physical-device-group-properties '(:struct %vk:physical-device-group-properties) physical-device-group-properties :out :list))

(defvk-get-struct-fun (get-device-group-peer-memory-features
                       %vk:get-device-group-peer-memory-features
                       "Represents <vkGetDeviceGroupPeerMemoryFeatures>"
                       ((device cffi:foreign-pointer) (heap-index unsigned-byte) (local-device-index unsigned-byte) (remote-device-index unsigned-byte))
                       ())
  (device '%vk:device device :in :handle)
  (heap-index :uint32 heap-index :in :raw)
  (local-device-index :uint32 local-device-index :in :raw)
  (remote-device-index :uint32 remote-device-index :in :raw)
  (peer-memory-features '%vk:peer-memory-feature-flags peer-memory-features :out :raw))

(defvk-get-struct-fun (get-device-group-peer-memory-features-khr
                       %vk:get-device-group-peer-memory-features-khr
                       "Represents <vkGetDeviceGroupPeerMemoryFeaturesKHR>"
                       ((device cffi:foreign-pointer) (heap-index unsigned-byte) (local-device-index unsigned-byte) (remote-device-index unsigned-byte))
                       ())
  (device '%vk:device device :in :handle)
  (heap-index :uint32 heap-index :in :raw)
  (local-device-index :uint32 local-device-index :in :raw)
  (remote-device-index :uint32 remote-device-index :in :raw)
  (peer-memory-features '%vk:peer-memory-feature-flags peer-memory-features :out :raw))

(defvk-simple-fun (bind-buffer-memory-2
                   %vk:bind-buffer-memory-2
                   "Represents <vkBindBufferMemory2>"
                   ((device cffi:foreign-pointer) (bind-infos list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (bind-info-count :uint32 (length bind-infos) :in :raw)
  (bind-infos '(:struct %vk:bind-buffer-memory-info) bind-infos :in :list))

(defvk-simple-fun (bind-buffer-memory-2-khr
                   %vk:bind-buffer-memory-2-khr
                   "Represents <vkBindBufferMemory2KHR>"
                   ((device cffi:foreign-pointer) (bind-infos list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (bind-info-count :uint32 (length bind-infos) :in :raw)
  (bind-infos '(:struct %vk:bind-buffer-memory-info) bind-infos :in :list))

(defvk-simple-fun (bind-image-memory-2
                   %vk:bind-image-memory-2
                   "Represents <vkBindImageMemory2>"
                   ((device cffi:foreign-pointer) (bind-infos list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (bind-info-count :uint32 (length bind-infos) :in :raw)
  (bind-infos '(:struct %vk:bind-image-memory-info) bind-infos :in :list))

(defvk-simple-fun (bind-image-memory-2-khr
                   %vk:bind-image-memory-2-khr
                   "Represents <vkBindImageMemory2KHR>"
                   ((device cffi:foreign-pointer) (bind-infos list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (bind-info-count :uint32 (length bind-infos) :in :raw)
  (bind-infos '(:struct %vk:bind-image-memory-info) bind-infos :in :list))

(defvk-simple-fun (cmd-set-device-mask
                   %vk:cmd-set-device-mask
                   "Represents <vkCmdSetDeviceMask>"
                   ((command-buffer cffi:foreign-pointer) (device-mask unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (device-mask :uint32 device-mask :in :raw))

(defvk-simple-fun (cmd-set-device-mask-khr
                   %vk:cmd-set-device-mask-khr
                   "Represents <vkCmdSetDeviceMaskKHR>"
                   ((command-buffer cffi:foreign-pointer) (device-mask unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (device-mask :uint32 device-mask :in :raw))

(defvk-get-struct-fun (get-device-group-present-capabilities-khr
                       %vk:get-device-group-present-capabilities-khr
                       "Represents <vkGetDeviceGroupPresentCapabilitiesKHR>"
                       ((device cffi:foreign-pointer))
                       ())
  (device '%vk:device device :in :handle)
  (device-group-present-capabilities '(:struct %vk:device-group-present-capabilities-khr) device-group-present-capabilities :out))

(defvk-get-struct-fun (get-device-group-surface-present-modes-khr
                       %vk:get-device-group-surface-present-modes-khr
                       "Represents <vkGetDeviceGroupSurfacePresentModesKHR>"
                       ((device cffi:foreign-pointer) (surface cffi:foreign-pointer))
                       ())
  (device '%vk:device device :in :handle)
  (surface '%vk:surface-khr surface :in :handle)
  (modes '%vk:device-group-present-mode-flags-khr modes :out :raw))

(defvk-create-handle-fun (acquire-next-image-2-khr
                          %vk:acquire-next-image-2-khr
                          "Represents <vkAcquireNextImage2KHR>"
                          ((device cffi:foreign-pointer) (acquire-info (or vk:acquire-next-image-info-khr cffi:foreign-pointer)))
                          ()
                          nil)
  (device '%vk:device device :in :handle)
  (acquire-info '(:struct %vk:acquire-next-image-info-khr) acquire-info :in)
  (image-index :uint32 image-index :out))

(defvk-simple-fun (cmd-dispatch-base
                   %vk:cmd-dispatch-base
                   "Represents <vkCmdDispatchBase>"
                   ((command-buffer cffi:foreign-pointer) (base-group-x unsigned-byte) (base-group-y unsigned-byte) (base-group-z unsigned-byte) (group-count-x unsigned-byte) (group-count-y unsigned-byte) (group-count-z unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (base-group-x :uint32 base-group-x :in :raw)
  (base-group-y :uint32 base-group-y :in :raw)
  (base-group-z :uint32 base-group-z :in :raw)
  (group-count-x :uint32 group-count-x :in :raw)
  (group-count-y :uint32 group-count-y :in :raw)
  (group-count-z :uint32 group-count-z :in :raw))

(defvk-simple-fun (cmd-dispatch-base-khr
                   %vk:cmd-dispatch-base-khr
                   "Represents <vkCmdDispatchBaseKHR>"
                   ((command-buffer cffi:foreign-pointer) (base-group-x unsigned-byte) (base-group-y unsigned-byte) (base-group-z unsigned-byte) (group-count-x unsigned-byte) (group-count-y unsigned-byte) (group-count-z unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (base-group-x :uint32 base-group-x :in :raw)
  (base-group-y :uint32 base-group-y :in :raw)
  (base-group-z :uint32 base-group-z :in :raw)
  (group-count-x :uint32 group-count-x :in :raw)
  (group-count-y :uint32 group-count-y :in :raw)
  (group-count-z :uint32 group-count-z :in :raw))

(defvk-enumerate-fun (get-physical-device-present-rectangles-khr
                      %vk:get-physical-device-present-rectangles-khr
                      "Represents <vkGetPhysicalDevicePresentRectanglesKHR>"
                      ((physical-device cffi:foreign-pointer) (surface cffi:foreign-pointer))
                      ()
                      rect-count
                      rects
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (surface '%vk:surface-khr surface :in :handle)
  (rect-count :uint32 rect-count :out)
  (rects '(:struct %vk:rect-2d) rects :out :list))

(defvk-create-handle-fun (create-descriptor-update-template
                          %vk:create-descriptor-update-template
                          "Represents <vkCreateDescriptorUpdateTemplate>"
                          ((device cffi:foreign-pointer) (create-info (or vk:descriptor-update-template-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:descriptor-update-template-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (descriptor-update-template '%vk:descriptor-update-template descriptor-update-template :out :handle))

(defvk-create-handle-fun (create-descriptor-update-template-khr
                          %vk:create-descriptor-update-template-khr
                          "Represents <vkCreateDescriptorUpdateTemplateKHR>"
                          ((device cffi:foreign-pointer) (create-info (or vk:descriptor-update-template-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:descriptor-update-template-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (descriptor-update-template '%vk:descriptor-update-template descriptor-update-template :out :handle))

(defvk-simple-fun (destroy-descriptor-update-template
                   %vk:destroy-descriptor-update-template
                   "Represents <vkDestroyDescriptorUpdateTemplate>"
                   ((device cffi:foreign-pointer))
                   (((descriptor-update-template (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (descriptor-update-template '%vk:descriptor-update-template descriptor-update-template :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (destroy-descriptor-update-template-khr
                   %vk:destroy-descriptor-update-template-khr
                   "Represents <vkDestroyDescriptorUpdateTemplateKHR>"
                   ((device cffi:foreign-pointer))
                   (((descriptor-update-template (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (descriptor-update-template '%vk:descriptor-update-template descriptor-update-template :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (update-descriptor-set-with-template
                   %vk:update-descriptor-set-with-template
                   "Represents <vkUpdateDescriptorSetWithTemplate>"
                   ((device cffi:foreign-pointer) (descriptor-set cffi:foreign-pointer) (descriptor-update-template cffi:foreign-pointer) (data cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (descriptor-set '%vk:descriptor-set descriptor-set :in :handle)
  (descriptor-update-template '%vk:descriptor-update-template descriptor-update-template :in :handle)
  (data '(:pointer :void) data :in :handle))

(defvk-simple-fun (update-descriptor-set-with-template-khr
                   %vk:update-descriptor-set-with-template-khr
                   "Represents <vkUpdateDescriptorSetWithTemplateKHR>"
                   ((device cffi:foreign-pointer) (descriptor-set cffi:foreign-pointer) (descriptor-update-template cffi:foreign-pointer) (data cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (descriptor-set '%vk:descriptor-set descriptor-set :in :handle)
  (descriptor-update-template '%vk:descriptor-update-template descriptor-update-template :in :handle)
  (data '(:pointer :void) data :in :handle))

(defvk-simple-fun (cmd-push-descriptor-set-with-template-khr
                   %vk:cmd-push-descriptor-set-with-template-khr
                   "Represents <vkCmdPushDescriptorSetWithTemplateKHR>"
                   ((command-buffer cffi:foreign-pointer) (descriptor-update-template cffi:foreign-pointer) (layout cffi:foreign-pointer) (set unsigned-byte) (data cffi:foreign-pointer))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (descriptor-update-template '%vk:descriptor-update-template descriptor-update-template :in :handle)
  (layout '%vk:pipeline-layout layout :in :handle)
  (set :uint32 set :in :raw)
  (data '(:pointer :void) data :in :handle))

(defvk-simple-fun (set-hdr-metadata-ext
                   %vk:set-hdr-metadata-ext
                   "Represents <vkSetHdrMetadataEXT>"
                   ((device cffi:foreign-pointer) (swapchains list) (metadata list))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (swapchain-count :uint32 (length metadata) :in :raw)
  (swapchains '%vk:swapchain-khr swapchains :in :handle :list)
  (metadata '(:struct %vk:hdr-metadata-ext) metadata :in :list))

(defvk-simple-fun (get-swapchain-status-khr
                   %vk:get-swapchain-status-khr
                   "Represents <vkGetSwapchainStatusKHR>"
                   ((device cffi:foreign-pointer) (swapchain cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (swapchain '%vk:swapchain-khr swapchain :in :handle))

(defvk-get-struct-fun (get-refresh-cycle-duration-google
                       %vk:get-refresh-cycle-duration-google
                       "Represents <vkGetRefreshCycleDurationGOOGLE>"
                       ((device cffi:foreign-pointer) (swapchain cffi:foreign-pointer))
                       ()
                       t)
  (device '%vk:device device :in :handle)
  (swapchain '%vk:swapchain-khr swapchain :in :handle)
  (display-timing-properties '(:struct %vk:refresh-cycle-duration-google) display-timing-properties :out))

(defvk-enumerate-fun (get-past-presentation-timing-google
                      %vk:get-past-presentation-timing-google
                      "Represents <vkGetPastPresentationTimingGOOGLE>"
                      ((device cffi:foreign-pointer) (swapchain cffi:foreign-pointer))
                      ()
                      presentation-timing-count
                      presentation-timings
                      nil
                      t)
  (device '%vk:device device :in :handle)
  (swapchain '%vk:swapchain-khr swapchain :in :handle)
  (presentation-timing-count :uint32 presentation-timing-count :out)
  (presentation-timings '(:struct %vk:past-presentation-timing-google) presentation-timings :out :list))

(defvk-create-handle-fun (create-i-os-surface-mvk
                          %vk:create-i-os-surface-mvk
                          "Represents <vkCreateIOSSurfaceMVK>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:i-os-surface-create-info-mvk cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:i-os-surface-create-info-mvk) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-create-handle-fun (create-mac-os-surface-mvk
                          %vk:create-mac-os-surface-mvk
                          "Represents <vkCreateMacOSSurfaceMVK>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:mac-os-surface-create-info-mvk cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:mac-os-surface-create-info-mvk) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-create-handle-fun (create-metal-surface-ext
                          %vk:create-metal-surface-ext
                          "Represents <vkCreateMetalSurfaceEXT>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:metal-surface-create-info-ext cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:metal-surface-create-info-ext) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-simple-fun (cmd-set-viewport-w-scaling-nv
                   %vk:cmd-set-viewport-w-scaling-nv
                   "Represents <vkCmdSetViewportWScalingNV>"
                   ((command-buffer cffi:foreign-pointer) (first-viewport unsigned-byte) (viewport-w-scalings list))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (first-viewport :uint32 first-viewport :in :raw)
  (viewport-count :uint32 (length viewport-w-scalings) :in :raw)
  (viewport-w-scalings '(:struct %vk:viewport-w-scaling-nv) viewport-w-scalings :in :list))

(defvk-simple-fun (cmd-set-discard-rectangle-ext
                   %vk:cmd-set-discard-rectangle-ext
                   "Represents <vkCmdSetDiscardRectangleEXT>"
                   ((command-buffer cffi:foreign-pointer) (first-discard-rectangle unsigned-byte) (discard-rectangles list))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (first-discard-rectangle :uint32 first-discard-rectangle :in :raw)
  (discard-rectangle-count :uint32 (length discard-rectangles) :in :raw)
  (discard-rectangles '(:struct %vk:rect-2d) discard-rectangles :in :list))

(defvk-simple-fun (cmd-set-sample-locations-ext
                   %vk:cmd-set-sample-locations-ext
                   "Represents <vkCmdSetSampleLocationsEXT>"
                   ((command-buffer cffi:foreign-pointer) (sample-locations-info (or vk:sample-locations-info-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (sample-locations-info '(:struct %vk:sample-locations-info-ext) sample-locations-info :in))

(defvk-get-struct-fun (get-physical-device-multisample-properties-ext
                       %vk:get-physical-device-multisample-properties-ext
                       "Represents <vkGetPhysicalDeviceMultisamplePropertiesEXT>"
                       ((physical-device cffi:foreign-pointer) (samples keyword))
                       ()
                       t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (samples '%vk:sample-count-flag-bits samples :in :raw)
  (multisample-properties '(:struct %vk:multisample-properties-ext) multisample-properties :out))

(defvk-get-struct-fun (get-physical-device-surface-capabilities-2-khr
                       %vk:get-physical-device-surface-capabilities-2-khr
                       "Represents <vkGetPhysicalDeviceSurfaceCapabilities2KHR>"
                       ((physical-device cffi:foreign-pointer) (surface-info (or vk:physical-device-surface-info-2-khr cffi:foreign-pointer)))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (surface-info '(:struct %vk:physical-device-surface-info-2-khr) surface-info :in)
  (surface-capabilities '(:struct %vk:surface-capabilities-2-khr) surface-capabilities :out))

(defvk-enumerate-fun (get-physical-device-surface-formats-2-khr
                      %vk:get-physical-device-surface-formats-2-khr
                      "Represents <vkGetPhysicalDeviceSurfaceFormats2KHR>"
                      ((physical-device cffi:foreign-pointer) (surface-info (or vk:physical-device-surface-info-2-khr cffi:foreign-pointer)))
                      ()
                      surface-format-count
                      surface-formats
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (surface-info '(:struct %vk:physical-device-surface-info-2-khr) surface-info :in)
  (surface-format-count :uint32 surface-format-count :out)
  (surface-formats '(:struct %vk:surface-format-2-khr) surface-formats :out :list))

(defvk-enumerate-fun (get-physical-device-display-properties-2-khr
                      %vk:get-physical-device-display-properties-2-khr
                      "Represents <vkGetPhysicalDeviceDisplayProperties2KHR>"
                      ((physical-device cffi:foreign-pointer))
                      ()
                      property-count
                      properties
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:display-properties-2-khr) properties :out :list))

(defvk-enumerate-fun (get-physical-device-display-plane-properties-2-khr
                      %vk:get-physical-device-display-plane-properties-2-khr
                      "Represents <vkGetPhysicalDeviceDisplayPlaneProperties2KHR>"
                      ((physical-device cffi:foreign-pointer))
                      ()
                      property-count
                      properties
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:display-plane-properties-2-khr) properties :out :list))

(defvk-enumerate-fun (get-display-mode-properties-2-khr
                      %vk:get-display-mode-properties-2-khr
                      "Represents <vkGetDisplayModeProperties2KHR>"
                      ((physical-device cffi:foreign-pointer) (display cffi:foreign-pointer))
                      ()
                      property-count
                      properties
                      nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (display '%vk:display-khr display :in :handle)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:display-mode-properties-2-khr) properties :out :list))

(defvk-get-struct-fun (get-display-plane-capabilities-2-khr
                       %vk:get-display-plane-capabilities-2-khr
                       "Represents <vkGetDisplayPlaneCapabilities2KHR>"
                       ((physical-device cffi:foreign-pointer) (display-plane-info (or vk:display-plane-info-2-khr cffi:foreign-pointer)))
                       ())
  (physical-device '%vk:physical-device physical-device :in :handle)
  (display-plane-info '(:struct %vk:display-plane-info-2-khr) display-plane-info :in)
  (capabilities '(:struct %vk:display-plane-capabilities-2-khr) capabilities :out))

(defvk-get-struct-fun (get-buffer-memory-requirements-2
                       %vk:get-buffer-memory-requirements-2
                       "Represents <vkGetBufferMemoryRequirements2>"
                       ((device cffi:foreign-pointer) (info (or vk:buffer-memory-requirements-info-2 cffi:foreign-pointer)))
                       ())
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:buffer-memory-requirements-info-2) info :in)
  (memory-requirements '(:struct %vk:memory-requirements-2) memory-requirements :out))

(defvk-get-struct-fun (get-buffer-memory-requirements-2-khr
                       %vk:get-buffer-memory-requirements-2-khr
                       "Represents <vkGetBufferMemoryRequirements2KHR>"
                       ((device cffi:foreign-pointer) (info (or vk:buffer-memory-requirements-info-2 cffi:foreign-pointer)))
                       ())
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:buffer-memory-requirements-info-2) info :in)
  (memory-requirements '(:struct %vk:memory-requirements-2) memory-requirements :out))

(defvk-get-struct-fun (get-image-memory-requirements-2
                       %vk:get-image-memory-requirements-2
                       "Represents <vkGetImageMemoryRequirements2>"
                       ((device cffi:foreign-pointer) (info (or vk:image-memory-requirements-info-2 cffi:foreign-pointer)))
                       ())
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:image-memory-requirements-info-2) info :in)
  (memory-requirements '(:struct %vk:memory-requirements-2) memory-requirements :out))

(defvk-get-struct-fun (get-image-memory-requirements-2-khr
                       %vk:get-image-memory-requirements-2-khr
                       "Represents <vkGetImageMemoryRequirements2KHR>"
                       ((device cffi:foreign-pointer) (info (or vk:image-memory-requirements-info-2 cffi:foreign-pointer)))
                       ())
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:image-memory-requirements-info-2) info :in)
  (memory-requirements '(:struct %vk:memory-requirements-2) memory-requirements :out))

(defvk-get-structs-fun (get-image-sparse-memory-requirements-2
                        %vk:get-image-sparse-memory-requirements-2
                        "Represents <vkGetImageSparseMemoryRequirements2>"
                        ((device cffi:foreign-pointer) (info (or vk:image-sparse-memory-requirements-info-2 cffi:foreign-pointer)))
                        ()
                        sparse-memory-requirement-count
                        sparse-memory-requirements
                      t)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:image-sparse-memory-requirements-info-2) info :in)
  (sparse-memory-requirement-count :uint32 sparse-memory-requirement-count :out)
  (sparse-memory-requirements '(:struct %vk:sparse-image-memory-requirements-2) sparse-memory-requirements :out :list))

(defvk-get-structs-fun (get-image-sparse-memory-requirements-2-khr
                        %vk:get-image-sparse-memory-requirements-2-khr
                        "Represents <vkGetImageSparseMemoryRequirements2KHR>"
                        ((device cffi:foreign-pointer) (info (or vk:image-sparse-memory-requirements-info-2 cffi:foreign-pointer)))
                        ()
                        sparse-memory-requirement-count
                        sparse-memory-requirements
                      t)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:image-sparse-memory-requirements-info-2) info :in)
  (sparse-memory-requirement-count :uint32 sparse-memory-requirement-count :out)
  (sparse-memory-requirements '(:struct %vk:sparse-image-memory-requirements-2) sparse-memory-requirements :out :list))

(defvk-create-handle-fun (create-sampler-ycbcr-conversion
                          %vk:create-sampler-ycbcr-conversion
                          "Represents <vkCreateSamplerYcbcrConversion>"
                          ((device cffi:foreign-pointer) (create-info (or vk:sampler-ycbcr-conversion-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:sampler-ycbcr-conversion-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (ycbcr-conversion '%vk:sampler-ycbcr-conversion ycbcr-conversion :out :handle))

(defvk-create-handle-fun (create-sampler-ycbcr-conversion-khr
                          %vk:create-sampler-ycbcr-conversion-khr
                          "Represents <vkCreateSamplerYcbcrConversionKHR>"
                          ((device cffi:foreign-pointer) (create-info (or vk:sampler-ycbcr-conversion-create-info cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:sampler-ycbcr-conversion-create-info) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (ycbcr-conversion '%vk:sampler-ycbcr-conversion ycbcr-conversion :out :handle))

(defvk-simple-fun (destroy-sampler-ycbcr-conversion
                   %vk:destroy-sampler-ycbcr-conversion
                   "Represents <vkDestroySamplerYcbcrConversion>"
                   ((device cffi:foreign-pointer))
                   (((ycbcr-conversion (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (ycbcr-conversion '%vk:sampler-ycbcr-conversion ycbcr-conversion :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (destroy-sampler-ycbcr-conversion-khr
                   %vk:destroy-sampler-ycbcr-conversion-khr
                   "Represents <vkDestroySamplerYcbcrConversionKHR>"
                   ((device cffi:foreign-pointer))
                   (((ycbcr-conversion (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (ycbcr-conversion '%vk:sampler-ycbcr-conversion ycbcr-conversion :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (get-device-queue-2
                          %vk:get-device-queue-2
                          "Represents <vkGetDeviceQueue2>"
                          ((device cffi:foreign-pointer) (queue-info (or vk:device-queue-info-2 cffi:foreign-pointer)))
                          ()
                          t)
  (device '%vk:device device :in :handle)
  (queue-info '(:struct %vk:device-queue-info-2) queue-info :in)
  (queue '%vk:queue queue :out :handle))

(defvk-create-handle-fun (create-validation-cache-ext
                          %vk:create-validation-cache-ext
                          "Represents <vkCreateValidationCacheEXT>"
                          ((device cffi:foreign-pointer) (create-info (or vk:validation-cache-create-info-ext cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:validation-cache-create-info-ext) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (validation-cache '%vk:validation-cache-ext validation-cache :out :handle))

(defvk-simple-fun (destroy-validation-cache-ext
                   %vk:destroy-validation-cache-ext
                   "Represents <vkDestroyValidationCacheEXT>"
                   ((device cffi:foreign-pointer))
                   (((validation-cache (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (validation-cache '%vk:validation-cache-ext validation-cache :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-create-handle-fun (get-validation-cache-data-ext
                          %vk:get-validation-cache-data-ext
                          "Represents <vkGetValidationCacheDataEXT>"
                          ((device cffi:foreign-pointer) (validation-cache cffi:foreign-pointer))
                          (((data nil) cffi:foreign-pointer))
                          nil
                          t)
  (device '%vk:device device :in :handle)
  (validation-cache '%vk:validation-cache-ext validation-cache :in :handle)
  (data-size '%vk:size-t data-size :out)
  (data '(:pointer :void) data :in :handle :optional))

(defvk-simple-fun (merge-validation-caches-ext
                   %vk:merge-validation-caches-ext
                   "Represents <vkMergeValidationCachesEXT>"
                   ((device cffi:foreign-pointer) (dst-cache cffi:foreign-pointer) (src-caches list))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (dst-cache '%vk:validation-cache-ext dst-cache :in :handle)
  (src-cache-count :uint32 (length src-caches) :in :raw)
  (src-caches '%vk:validation-cache-ext src-caches :in :handle :list))

(defvk-get-struct-fun (get-descriptor-set-layout-support
                       %vk:get-descriptor-set-layout-support
                       "Represents <vkGetDescriptorSetLayoutSupport>"
                       ((device cffi:foreign-pointer) (create-info (or vk:descriptor-set-layout-create-info cffi:foreign-pointer)))
                       ())
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:descriptor-set-layout-create-info) create-info :in)
  (support '(:struct %vk:descriptor-set-layout-support) support :out))

(defvk-get-struct-fun (get-descriptor-set-layout-support-khr
                       %vk:get-descriptor-set-layout-support-khr
                       "Represents <vkGetDescriptorSetLayoutSupportKHR>"
                       ((device cffi:foreign-pointer) (create-info (or vk:descriptor-set-layout-create-info cffi:foreign-pointer)))
                       ())
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:descriptor-set-layout-create-info) create-info :in)
  (support '(:struct %vk:descriptor-set-layout-support) support :out))

(defvk-create-handle-fun (get-shader-info-amd
                          %vk:get-shader-info-amd
                          "Represents <vkGetShaderInfoAMD>"
                          ((device cffi:foreign-pointer) (pipeline cffi:foreign-pointer) (shader-stage keyword) (info-type keyword))
                          (((info nil) cffi:foreign-pointer))
                          nil
                          t)
  (device '%vk:device device :in :handle)
  (pipeline '%vk:pipeline pipeline :in :handle)
  (shader-stage '%vk:shader-stage-flag-bits shader-stage :in :raw)
  (info-type '%vk:shader-info-type-amd info-type :in :raw)
  (info-size '%vk:size-t info-size :out)
  (info '(:pointer :void) info :in :handle :optional))

(defvk-simple-fun (set-local-dimming-amd
                   %vk:set-local-dimming-amd
                   "Represents <vkSetLocalDimmingAMD>"
                   ((device cffi:foreign-pointer) (swap-chain cffi:foreign-pointer) (local-dimming-enable boolean))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (swap-chain '%vk:swapchain-khr swap-chain :in :handle)
  (local-dimming-enable '%vk:bool32 local-dimming-enable :in :raw))

(defvk-enumerate-fun (get-physical-device-calibrateable-time-domains-ext
                      %vk:get-physical-device-calibrateable-time-domains-ext
                      "Represents <vkGetPhysicalDeviceCalibrateableTimeDomainsEXT>"
                      ((physical-device cffi:foreign-pointer))
                      ()
                      time-domain-count
                      time-domains
                      nil
                      t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (time-domain-count :uint32 time-domain-count :out)
  (time-domains '%vk:time-domain-ext time-domains :out :raw :list))

(defvk-get-array-and-singular-fun (get-calibrated-timestamps-ext
                                   %vk:get-calibrated-timestamps-ext
                                   "Represents <vkGetCalibratedTimestampsEXT>"
                                   ((device cffi:foreign-pointer) (timestamp-infos list))
                                   ()
                                   (length timestamp-infos)
                                   timestamps
                                   t)
  (device '%vk:device device :in :handle)
  (timestamp-count :uint32 (length timestamp-infos) :in :raw)
  (timestamp-infos '(:struct %vk:calibrated-timestamp-info-ext) timestamp-infos :in :list)
  (timestamps :uint64 timestamps :out :list)
  (max-deviation :uint64 max-deviation :out))

(defvk-simple-fun (set-debug-utils-object-name-ext
                   %vk:set-debug-utils-object-name-ext
                   "Represents <vkSetDebugUtilsObjectNameEXT>"
                   ((device cffi:foreign-pointer) (name-info (or vk:debug-utils-object-name-info-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (name-info '(:struct %vk:debug-utils-object-name-info-ext) name-info :in))

(defvk-simple-fun (set-debug-utils-object-tag-ext
                   %vk:set-debug-utils-object-tag-ext
                   "Represents <vkSetDebugUtilsObjectTagEXT>"
                   ((device cffi:foreign-pointer) (tag-info (or vk:debug-utils-object-tag-info-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (tag-info '(:struct %vk:debug-utils-object-tag-info-ext) tag-info :in))

(defvk-simple-fun (queue-begin-debug-utils-label-ext
                   %vk:queue-begin-debug-utils-label-ext
                   "Represents <vkQueueBeginDebugUtilsLabelEXT>"
                   ((queue cffi:foreign-pointer) (label-info (or vk:debug-utils-label-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (queue '%vk:queue queue :in :handle)
  (label-info '(:struct %vk:debug-utils-label-ext) label-info :in))

(defvk-simple-fun (queue-end-debug-utils-label-ext
                   %vk:queue-end-debug-utils-label-ext
                   "Represents <vkQueueEndDebugUtilsLabelEXT>"
                   ((queue cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (queue '%vk:queue queue :in :handle))

(defvk-simple-fun (queue-insert-debug-utils-label-ext
                   %vk:queue-insert-debug-utils-label-ext
                   "Represents <vkQueueInsertDebugUtilsLabelEXT>"
                   ((queue cffi:foreign-pointer) (label-info (or vk:debug-utils-label-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (queue '%vk:queue queue :in :handle)
  (label-info '(:struct %vk:debug-utils-label-ext) label-info :in))

(defvk-simple-fun (cmd-begin-debug-utils-label-ext
                   %vk:cmd-begin-debug-utils-label-ext
                   "Represents <vkCmdBeginDebugUtilsLabelEXT>"
                   ((command-buffer cffi:foreign-pointer) (label-info (or vk:debug-utils-label-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (label-info '(:struct %vk:debug-utils-label-ext) label-info :in))

(defvk-simple-fun (cmd-end-debug-utils-label-ext
                   %vk:cmd-end-debug-utils-label-ext
                   "Represents <vkCmdEndDebugUtilsLabelEXT>"
                   ((command-buffer cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle))

(defvk-simple-fun (cmd-insert-debug-utils-label-ext
                   %vk:cmd-insert-debug-utils-label-ext
                   "Represents <vkCmdInsertDebugUtilsLabelEXT>"
                   ((command-buffer cffi:foreign-pointer) (label-info (or vk:debug-utils-label-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (label-info '(:struct %vk:debug-utils-label-ext) label-info :in))

(defvk-create-handle-fun (create-debug-utils-messenger-ext
                          %vk:create-debug-utils-messenger-ext
                          "Represents <vkCreateDebugUtilsMessengerEXT>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:debug-utils-messenger-create-info-ext cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:debug-utils-messenger-create-info-ext) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (messenger '%vk:debug-utils-messenger-ext messenger :out :handle))

(defvk-simple-fun (destroy-debug-utils-messenger-ext
                   %vk:destroy-debug-utils-messenger-ext
                   "Represents <vkDestroyDebugUtilsMessengerEXT>"
                   ((instance cffi:foreign-pointer))
                   (((messenger (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil
                  t)
  (instance '%vk:instance instance :in :handle)
  (messenger '%vk:debug-utils-messenger-ext messenger :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (submit-debug-utils-message-ext
                   %vk:submit-debug-utils-message-ext
                   "Represents <vkSubmitDebugUtilsMessageEXT>"
                   ((instance cffi:foreign-pointer) (message-severity keyword) (message-types (or unsigned-byte list)) (callback-data (or vk:debug-utils-messenger-callback-data-ext cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (instance '%vk:instance instance :in :handle)
  (message-severity '%vk:debug-utils-message-severity-flag-bits-ext message-severity :in :raw)
  (message-types '%vk:debug-utils-message-type-flags-ext message-types :in :raw)
  (callback-data '(:struct %vk:debug-utils-messenger-callback-data-ext) callback-data :in))

(defvk-get-struct-fun (get-memory-host-pointer-properties-ext
                       %vk:get-memory-host-pointer-properties-ext
                       "Represents <vkGetMemoryHostPointerPropertiesEXT>"
                       ((device cffi:foreign-pointer) (handle-type keyword) (host-pointer cffi:foreign-pointer))
                       ()
                       t)
  (device '%vk:device device :in :handle)
  (handle-type '%vk:external-memory-handle-type-flag-bits handle-type :in :raw)
  (host-pointer '(:pointer :void) host-pointer :in :handle)
  (memory-host-pointer-properties '(:struct %vk:memory-host-pointer-properties-ext) memory-host-pointer-properties :out))

(defvk-simple-fun (cmd-write-buffer-marker-amd
                   %vk:cmd-write-buffer-marker-amd
                   "Represents <vkCmdWriteBufferMarkerAMD>"
                   ((command-buffer cffi:foreign-pointer) (pipeline-stage keyword) (dst-buffer cffi:foreign-pointer) (dst-offset unsigned-byte) (marker unsigned-byte))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (pipeline-stage '%vk:pipeline-stage-flag-bits pipeline-stage :in :raw)
  (dst-buffer '%vk:buffer dst-buffer :in :handle)
  (dst-offset '%vk:device-size dst-offset :in :raw)
  (marker :uint32 marker :in :raw))

(defvk-create-handle-fun (create-render-pass-2
                          %vk:create-render-pass-2
                          "Represents <vkCreateRenderPass2>"
                          ((device cffi:foreign-pointer) (create-info (or vk:render-pass-create-info-2 cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:render-pass-create-info-2) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (render-pass '%vk:render-pass render-pass :out :handle))

(defvk-create-handle-fun (create-render-pass-2-khr
                          %vk:create-render-pass-2-khr
                          "Represents <vkCreateRenderPass2KHR>"
                          ((device cffi:foreign-pointer) (create-info (or vk:render-pass-create-info-2 cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:render-pass-create-info-2) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (render-pass '%vk:render-pass render-pass :out :handle))

(defvk-simple-fun (cmd-begin-render-pass-2
                   %vk:cmd-begin-render-pass-2
                   "Represents <vkCmdBeginRenderPass2>"
                   ((command-buffer cffi:foreign-pointer) (render-pass-begin (or vk:render-pass-begin-info cffi:foreign-pointer)) (subpass-begin-info (or vk:subpass-begin-info cffi:foreign-pointer)))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (render-pass-begin '(:struct %vk:render-pass-begin-info) render-pass-begin :in)
  (subpass-begin-info '(:struct %vk:subpass-begin-info) subpass-begin-info :in))

(defvk-simple-fun (cmd-begin-render-pass-2-khr
                   %vk:cmd-begin-render-pass-2-khr
                   "Represents <vkCmdBeginRenderPass2KHR>"
                   ((command-buffer cffi:foreign-pointer) (render-pass-begin (or vk:render-pass-begin-info cffi:foreign-pointer)) (subpass-begin-info (or vk:subpass-begin-info cffi:foreign-pointer)))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (render-pass-begin '(:struct %vk:render-pass-begin-info) render-pass-begin :in)
  (subpass-begin-info '(:struct %vk:subpass-begin-info) subpass-begin-info :in))

(defvk-simple-fun (cmd-next-subpass-2
                   %vk:cmd-next-subpass-2
                   "Represents <vkCmdNextSubpass2>"
                   ((command-buffer cffi:foreign-pointer) (subpass-begin-info (or vk:subpass-begin-info cffi:foreign-pointer)) (subpass-end-info (or vk:subpass-end-info cffi:foreign-pointer)))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (subpass-begin-info '(:struct %vk:subpass-begin-info) subpass-begin-info :in)
  (subpass-end-info '(:struct %vk:subpass-end-info) subpass-end-info :in))

(defvk-simple-fun (cmd-next-subpass-2-khr
                   %vk:cmd-next-subpass-2-khr
                   "Represents <vkCmdNextSubpass2KHR>"
                   ((command-buffer cffi:foreign-pointer) (subpass-begin-info (or vk:subpass-begin-info cffi:foreign-pointer)) (subpass-end-info (or vk:subpass-end-info cffi:foreign-pointer)))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (subpass-begin-info '(:struct %vk:subpass-begin-info) subpass-begin-info :in)
  (subpass-end-info '(:struct %vk:subpass-end-info) subpass-end-info :in))

(defvk-simple-fun (cmd-end-render-pass-2
                   %vk:cmd-end-render-pass-2
                   "Represents <vkCmdEndRenderPass2>"
                   ((command-buffer cffi:foreign-pointer) (subpass-end-info (or vk:subpass-end-info cffi:foreign-pointer)))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (subpass-end-info '(:struct %vk:subpass-end-info) subpass-end-info :in))

(defvk-simple-fun (cmd-end-render-pass-2-khr
                   %vk:cmd-end-render-pass-2-khr
                   "Represents <vkCmdEndRenderPass2KHR>"
                   ((command-buffer cffi:foreign-pointer) (subpass-end-info (or vk:subpass-end-info cffi:foreign-pointer)))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (subpass-end-info '(:struct %vk:subpass-end-info) subpass-end-info :in))

(defvk-create-handle-fun (get-semaphore-counter-value
                          %vk:get-semaphore-counter-value
                          "Represents <vkGetSemaphoreCounterValue>"
                          ((device cffi:foreign-pointer) (semaphore cffi:foreign-pointer))
                          ()
                          nil)
  (device '%vk:device device :in :handle)
  (semaphore '%vk:semaphore semaphore :in :handle)
  (value :uint64 value :out))

(defvk-create-handle-fun (get-semaphore-counter-value-khr
                          %vk:get-semaphore-counter-value-khr
                          "Represents <vkGetSemaphoreCounterValueKHR>"
                          ((device cffi:foreign-pointer) (semaphore cffi:foreign-pointer))
                          ()
                          nil)
  (device '%vk:device device :in :handle)
  (semaphore '%vk:semaphore semaphore :in :handle)
  (value :uint64 value :out))

(defvk-simple-fun (wait-semaphores
                   %vk:wait-semaphores
                   "Represents <vkWaitSemaphores>"
                   ((device cffi:foreign-pointer) (wait-info (or vk:semaphore-wait-info cffi:foreign-pointer)) (timeout unsigned-byte))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (wait-info '(:struct %vk:semaphore-wait-info) wait-info :in)
  (timeout :uint64 timeout :in :raw))

(defvk-simple-fun (wait-semaphores-khr
                   %vk:wait-semaphores-khr
                   "Represents <vkWaitSemaphoresKHR>"
                   ((device cffi:foreign-pointer) (wait-info (or vk:semaphore-wait-info cffi:foreign-pointer)) (timeout unsigned-byte))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (wait-info '(:struct %vk:semaphore-wait-info) wait-info :in)
  (timeout :uint64 timeout :in :raw))

(defvk-simple-fun (signal-semaphore
                   %vk:signal-semaphore
                   "Represents <vkSignalSemaphore>"
                   ((device cffi:foreign-pointer) (signal-info (or vk:semaphore-signal-info cffi:foreign-pointer)))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (signal-info '(:struct %vk:semaphore-signal-info) signal-info :in))

(defvk-simple-fun (signal-semaphore-khr
                   %vk:signal-semaphore-khr
                   "Represents <vkSignalSemaphoreKHR>"
                   ((device cffi:foreign-pointer) (signal-info (or vk:semaphore-signal-info cffi:foreign-pointer)))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (signal-info '(:struct %vk:semaphore-signal-info) signal-info :in))

(defvk-get-struct-fun (get-android-hardware-buffer-properties-android
                       %vk:get-android-hardware-buffer-properties-android
                       "Represents <vkGetAndroidHardwareBufferPropertiesANDROID>"
                       ((device cffi:foreign-pointer) (buffer cffi:foreign-pointer))
                       ()
                       t)
  (device '%vk:device device :in :handle)
  (buffer '(:pointer :void) buffer :in)
  (properties '(:struct %vk:android-hardware-buffer-properties-android) properties :out))

(defvk-get-struct-fun (get-memory-android-hardware-buffer-android
                       %vk:get-memory-android-hardware-buffer-android
                       "Represents <vkGetMemoryAndroidHardwareBufferANDROID>"
                       ((device cffi:foreign-pointer) (info (or vk:memory-get-android-hardware-buffer-info-android cffi:foreign-pointer)))
                       ()
                       t)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:memory-get-android-hardware-buffer-info-android) info :in)
  (buffer '(:pointer :void) buffer :out))

(defvk-simple-fun (cmd-draw-indirect-count
                   %vk:cmd-draw-indirect-count
                   "Represents <vkCmdDrawIndirectCount>"
                   ((command-buffer cffi:foreign-pointer) (buffer cffi:foreign-pointer) (offset unsigned-byte) (count-buffer cffi:foreign-pointer) (count-buffer-offset unsigned-byte) (max-draw-count unsigned-byte) (stride unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw)
  (count-buffer '%vk:buffer count-buffer :in :handle)
  (count-buffer-offset '%vk:device-size count-buffer-offset :in :raw)
  (max-draw-count :uint32 max-draw-count :in :raw)
  (stride :uint32 stride :in :raw))

(defvk-simple-fun (cmd-draw-indirect-count-amd
                   %vk:cmd-draw-indirect-count-amd
                   "Represents <vkCmdDrawIndirectCountAMD>"
                   ((command-buffer cffi:foreign-pointer) (buffer cffi:foreign-pointer) (offset unsigned-byte) (count-buffer cffi:foreign-pointer) (count-buffer-offset unsigned-byte) (max-draw-count unsigned-byte) (stride unsigned-byte))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw)
  (count-buffer '%vk:buffer count-buffer :in :handle)
  (count-buffer-offset '%vk:device-size count-buffer-offset :in :raw)
  (max-draw-count :uint32 max-draw-count :in :raw)
  (stride :uint32 stride :in :raw))

(defvk-simple-fun (cmd-draw-indirect-count-khr
                   %vk:cmd-draw-indirect-count-khr
                   "Represents <vkCmdDrawIndirectCountKHR>"
                   ((command-buffer cffi:foreign-pointer) (buffer cffi:foreign-pointer) (offset unsigned-byte) (count-buffer cffi:foreign-pointer) (count-buffer-offset unsigned-byte) (max-draw-count unsigned-byte) (stride unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw)
  (count-buffer '%vk:buffer count-buffer :in :handle)
  (count-buffer-offset '%vk:device-size count-buffer-offset :in :raw)
  (max-draw-count :uint32 max-draw-count :in :raw)
  (stride :uint32 stride :in :raw))

(defvk-simple-fun (cmd-draw-indexed-indirect-count
                   %vk:cmd-draw-indexed-indirect-count
                   "Represents <vkCmdDrawIndexedIndirectCount>"
                   ((command-buffer cffi:foreign-pointer) (buffer cffi:foreign-pointer) (offset unsigned-byte) (count-buffer cffi:foreign-pointer) (count-buffer-offset unsigned-byte) (max-draw-count unsigned-byte) (stride unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw)
  (count-buffer '%vk:buffer count-buffer :in :handle)
  (count-buffer-offset '%vk:device-size count-buffer-offset :in :raw)
  (max-draw-count :uint32 max-draw-count :in :raw)
  (stride :uint32 stride :in :raw))

(defvk-simple-fun (cmd-draw-indexed-indirect-count-amd
                   %vk:cmd-draw-indexed-indirect-count-amd
                   "Represents <vkCmdDrawIndexedIndirectCountAMD>"
                   ((command-buffer cffi:foreign-pointer) (buffer cffi:foreign-pointer) (offset unsigned-byte) (count-buffer cffi:foreign-pointer) (count-buffer-offset unsigned-byte) (max-draw-count unsigned-byte) (stride unsigned-byte))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw)
  (count-buffer '%vk:buffer count-buffer :in :handle)
  (count-buffer-offset '%vk:device-size count-buffer-offset :in :raw)
  (max-draw-count :uint32 max-draw-count :in :raw)
  (stride :uint32 stride :in :raw))

(defvk-simple-fun (cmd-draw-indexed-indirect-count-khr
                   %vk:cmd-draw-indexed-indirect-count-khr
                   "Represents <vkCmdDrawIndexedIndirectCountKHR>"
                   ((command-buffer cffi:foreign-pointer) (buffer cffi:foreign-pointer) (offset unsigned-byte) (count-buffer cffi:foreign-pointer) (count-buffer-offset unsigned-byte) (max-draw-count unsigned-byte) (stride unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw)
  (count-buffer '%vk:buffer count-buffer :in :handle)
  (count-buffer-offset '%vk:device-size count-buffer-offset :in :raw)
  (max-draw-count :uint32 max-draw-count :in :raw)
  (stride :uint32 stride :in :raw))

(defvk-simple-fun (cmd-set-checkpoint-nv
                   %vk:cmd-set-checkpoint-nv
                   "Represents <vkCmdSetCheckpointNV>"
                   ((command-buffer cffi:foreign-pointer) (checkpoint-marker cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (checkpoint-marker '(:pointer :void) checkpoint-marker :in :handle))

(defvk-get-structs-fun (get-queue-checkpoint-data-nv
                        %vk:get-queue-checkpoint-data-nv
                        "Represents <vkGetQueueCheckpointDataNV>"
                        ((queue cffi:foreign-pointer))
                        ()
                        checkpoint-data-count
                        checkpoint-data
                      t
                        t)
  (queue '%vk:queue queue :in :handle)
  (checkpoint-data-count :uint32 checkpoint-data-count :out)
  (checkpoint-data '(:struct %vk:checkpoint-data-nv) checkpoint-data :out :list))

(defvk-simple-fun (cmd-bind-transform-feedback-buffers-ext
                   %vk:cmd-bind-transform-feedback-buffers-ext
                   "Represents <vkCmdBindTransformFeedbackBuffersEXT>"
                   ((command-buffer cffi:foreign-pointer) (first-binding unsigned-byte) (buffers list) (offsets list))
                   (((sizes nil) list))
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (first-binding :uint32 first-binding :in :raw)
  (binding-count :uint32 (length sizes) :in :raw)
  (buffers '%vk:buffer buffers :in :handle :list)
  (offsets '%vk:device-size offsets :in :list)
  (sizes '%vk:device-size sizes :in :list :optional))

(defvk-simple-fun (cmd-begin-transform-feedback-ext
                   %vk:cmd-begin-transform-feedback-ext
                   "Represents <vkCmdBeginTransformFeedbackEXT>"
                   ((command-buffer cffi:foreign-pointer) (first-counter-buffer unsigned-byte) (counter-buffers list))
                   (((counter-buffer-offsets nil) list))
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (first-counter-buffer :uint32 first-counter-buffer :in :raw)
  (counter-buffer-count :uint32 (length counter-buffer-offsets) :in :raw)
  (counter-buffers '%vk:buffer counter-buffers :in :handle :list)
  (counter-buffer-offsets '%vk:device-size counter-buffer-offsets :in :list :optional))

(defvk-simple-fun (cmd-end-transform-feedback-ext
                   %vk:cmd-end-transform-feedback-ext
                   "Represents <vkCmdEndTransformFeedbackEXT>"
                   ((command-buffer cffi:foreign-pointer) (first-counter-buffer unsigned-byte) (counter-buffers list))
                   (((counter-buffer-offsets nil) list))
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (first-counter-buffer :uint32 first-counter-buffer :in :raw)
  (counter-buffer-count :uint32 (length counter-buffer-offsets) :in :raw)
  (counter-buffers '%vk:buffer counter-buffers :in :handle :list)
  (counter-buffer-offsets '%vk:device-size counter-buffer-offsets :in :list :optional))

(defvk-simple-fun (cmd-begin-query-indexed-ext
                   %vk:cmd-begin-query-indexed-ext
                   "Represents <vkCmdBeginQueryIndexedEXT>"
                   ((command-buffer cffi:foreign-pointer) (query-pool cffi:foreign-pointer) (query unsigned-byte) (index unsigned-byte))
                   (((flags nil) (or unsigned-byte list)))
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (query-pool '%vk:query-pool query-pool :in :handle)
  (query :uint32 query :in :raw)
  (flags '%vk:query-control-flags flags :in :raw :optional)
  (index :uint32 index :in :raw))

(defvk-simple-fun (cmd-end-query-indexed-ext
                   %vk:cmd-end-query-indexed-ext
                   "Represents <vkCmdEndQueryIndexedEXT>"
                   ((command-buffer cffi:foreign-pointer) (query-pool cffi:foreign-pointer) (query unsigned-byte) (index unsigned-byte))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (query-pool '%vk:query-pool query-pool :in :handle)
  (query :uint32 query :in :raw)
  (index :uint32 index :in :raw))

(defvk-simple-fun (cmd-draw-indirect-byte-count-ext
                   %vk:cmd-draw-indirect-byte-count-ext
                   "Represents <vkCmdDrawIndirectByteCountEXT>"
                   ((command-buffer cffi:foreign-pointer) (instance-count unsigned-byte) (first-instance unsigned-byte) (counter-buffer cffi:foreign-pointer) (counter-buffer-offset unsigned-byte) (counter-offset unsigned-byte) (vertex-stride unsigned-byte))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (instance-count :uint32 instance-count :in :raw)
  (first-instance :uint32 first-instance :in :raw)
  (counter-buffer '%vk:buffer counter-buffer :in :handle)
  (counter-buffer-offset '%vk:device-size counter-buffer-offset :in :raw)
  (counter-offset :uint32 counter-offset :in :raw)
  (vertex-stride :uint32 vertex-stride :in :raw))

(defvk-simple-fun (cmd-set-exclusive-scissor-nv
                   %vk:cmd-set-exclusive-scissor-nv
                   "Represents <vkCmdSetExclusiveScissorNV>"
                   ((command-buffer cffi:foreign-pointer) (first-exclusive-scissor unsigned-byte) (exclusive-scissors list))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (first-exclusive-scissor :uint32 first-exclusive-scissor :in :raw)
  (exclusive-scissor-count :uint32 (length exclusive-scissors) :in :raw)
  (exclusive-scissors '(:struct %vk:rect-2d) exclusive-scissors :in :list))

(defvk-simple-fun (cmd-bind-shading-rate-image-nv
                   %vk:cmd-bind-shading-rate-image-nv
                   "Represents <vkCmdBindShadingRateImageNV>"
                   ((command-buffer cffi:foreign-pointer) (image-layout keyword))
                   (((image-view (cffi:null-pointer)) cffi:foreign-pointer))
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (image-view '%vk:image-view image-view :in :handle :optional)
  (image-layout '%vk:image-layout image-layout :in :raw))

(defvk-simple-fun (cmd-set-viewport-shading-rate-palette-nv
                   %vk:cmd-set-viewport-shading-rate-palette-nv
                   "Represents <vkCmdSetViewportShadingRatePaletteNV>"
                   ((command-buffer cffi:foreign-pointer) (first-viewport unsigned-byte) (shading-rate-palettes list))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (first-viewport :uint32 first-viewport :in :raw)
  (viewport-count :uint32 (length shading-rate-palettes) :in :raw)
  (shading-rate-palettes '(:struct %vk:shading-rate-palette-nv) shading-rate-palettes :in :list))

(defvk-simple-fun (cmd-set-coarse-sample-order-nv
                   %vk:cmd-set-coarse-sample-order-nv
                   "Represents <vkCmdSetCoarseSampleOrderNV>"
                   ((command-buffer cffi:foreign-pointer) (sample-order-type keyword) (custom-sample-orders list))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (sample-order-type '%vk:coarse-sample-order-type-nv sample-order-type :in :raw)
  (custom-sample-order-count :uint32 (length custom-sample-orders) :in :raw)
  (custom-sample-orders '(:struct %vk:coarse-sample-order-custom-nv) custom-sample-orders :in :list))

(defvk-simple-fun (cmd-draw-mesh-tasks-nv
                   %vk:cmd-draw-mesh-tasks-nv
                   "Represents <vkCmdDrawMeshTasksNV>"
                   ((command-buffer cffi:foreign-pointer) (task-count unsigned-byte) (first-task unsigned-byte))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (task-count :uint32 task-count :in :raw)
  (first-task :uint32 first-task :in :raw))

(defvk-simple-fun (cmd-draw-mesh-tasks-indirect-nv
                   %vk:cmd-draw-mesh-tasks-indirect-nv
                   "Represents <vkCmdDrawMeshTasksIndirectNV>"
                   ((command-buffer cffi:foreign-pointer) (buffer cffi:foreign-pointer) (offset unsigned-byte) (draw-count unsigned-byte) (stride unsigned-byte))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw)
  (draw-count :uint32 draw-count :in :raw)
  (stride :uint32 stride :in :raw))

(defvk-simple-fun (cmd-draw-mesh-tasks-indirect-count-nv
                   %vk:cmd-draw-mesh-tasks-indirect-count-nv
                   "Represents <vkCmdDrawMeshTasksIndirectCountNV>"
                   ((command-buffer cffi:foreign-pointer) (buffer cffi:foreign-pointer) (offset unsigned-byte) (count-buffer cffi:foreign-pointer) (count-buffer-offset unsigned-byte) (max-draw-count unsigned-byte) (stride unsigned-byte))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw)
  (count-buffer '%vk:buffer count-buffer :in :handle)
  (count-buffer-offset '%vk:device-size count-buffer-offset :in :raw)
  (max-draw-count :uint32 max-draw-count :in :raw)
  (stride :uint32 stride :in :raw))

(defvk-simple-fun (compile-deferred-nv
                   %vk:compile-deferred-nv
                   "Represents <vkCompileDeferredNV>"
                   ((device cffi:foreign-pointer) (pipeline cffi:foreign-pointer) (shader unsigned-byte))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (pipeline '%vk:pipeline pipeline :in :handle)
  (shader :uint32 shader :in :raw))

(defvk-get-struct-fun (create-acceleration-structure-nv
                       %vk:create-acceleration-structure-nv
                       "Represents <vkCreateAccelerationStructureNV>"
                       ((device cffi:foreign-pointer) (create-info (or vk:acceleration-structure-create-info-nv cffi:foreign-pointer)))
                       (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                       t)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:acceleration-structure-create-info-nv) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (acceleration-structure '%vk:acceleration-structure-nv acceleration-structure :out))

(defvk-simple-fun (destroy-acceleration-structure-khr
                   %vk:destroy-acceleration-structure-khr
                   "Represents <vkDestroyAccelerationStructureKHR>"
                   ((device cffi:foreign-pointer))
                   (((acceleration-structure (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (acceleration-structure '%vk:acceleration-structure-khr acceleration-structure :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (destroy-acceleration-structure-nv
                   %vk:destroy-acceleration-structure-nv
                   "Represents <vkDestroyAccelerationStructureNV>"
                   ((device cffi:foreign-pointer))
                   (((acceleration-structure (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (acceleration-structure '%vk:acceleration-structure-khr acceleration-structure :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-get-struct-fun (get-acceleration-structure-memory-requirements-khr
                       %vk:get-acceleration-structure-memory-requirements-khr
                       "Represents <vkGetAccelerationStructureMemoryRequirementsKHR>"
                       ((device cffi:foreign-pointer) (info (or vk:acceleration-structure-memory-requirements-info-khr cffi:foreign-pointer)))
                       ())
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:acceleration-structure-memory-requirements-info-khr) info :in)
  (memory-requirements '(:struct %vk:memory-requirements-2) memory-requirements :out))

(defvk-get-struct-fun (get-acceleration-structure-memory-requirements-nv
                       %vk:get-acceleration-structure-memory-requirements-nv
                       "Represents <vkGetAccelerationStructureMemoryRequirementsNV>"
                       ((device cffi:foreign-pointer) (info (or vk:acceleration-structure-memory-requirements-info-nv cffi:foreign-pointer)))
                       ()
                       t)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:acceleration-structure-memory-requirements-info-nv) info :in)
  (memory-requirements '%vk:memory-requirements-2-khr memory-requirements :out))

(defvk-simple-fun (bind-acceleration-structure-memory-khr
                   %vk:bind-acceleration-structure-memory-khr
                   "Represents <vkBindAccelerationStructureMemoryKHR>"
                   ((device cffi:foreign-pointer) (bind-infos list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (bind-info-count :uint32 (length bind-infos) :in :raw)
  (bind-infos '(:struct %vk:bind-acceleration-structure-memory-info-khr) bind-infos :in :list))

(defvk-simple-fun (bind-acceleration-structure-memory-nv
                   %vk:bind-acceleration-structure-memory-nv
                   "Represents <vkBindAccelerationStructureMemoryNV>"
                   ((device cffi:foreign-pointer) (bind-infos list))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (bind-info-count :uint32 (length bind-infos) :in :raw)
  (bind-infos '(:struct %vk:bind-acceleration-structure-memory-info-khr) bind-infos :in :list))

(defvk-simple-fun (cmd-copy-acceleration-structure-nv
                   %vk:cmd-copy-acceleration-structure-nv
                   "Represents <vkCmdCopyAccelerationStructureNV>"
                   ((command-buffer cffi:foreign-pointer) (dst cffi:foreign-pointer) (src cffi:foreign-pointer) (mode keyword))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (dst '%vk:acceleration-structure-khr dst :in :handle)
  (src '%vk:acceleration-structure-khr src :in :handle)
  (mode '%vk:copy-acceleration-structure-mode-khr mode :in :raw))

(defvk-simple-fun (cmd-copy-acceleration-structure-khr
                   %vk:cmd-copy-acceleration-structure-khr
                   "Represents <vkCmdCopyAccelerationStructureKHR>"
                   ((command-buffer cffi:foreign-pointer) (info (or vk:copy-acceleration-structure-info-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (info '(:struct %vk:copy-acceleration-structure-info-khr) info :in))

(defvk-simple-fun (copy-acceleration-structure-khr
                   %vk:copy-acceleration-structure-khr
                   "Represents <vkCopyAccelerationStructureKHR>"
                   ((device cffi:foreign-pointer) (info (or vk:copy-acceleration-structure-info-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:copy-acceleration-structure-info-khr) info :in))

(defvk-simple-fun (cmd-copy-acceleration-structure-to-memory-khr
                   %vk:cmd-copy-acceleration-structure-to-memory-khr
                   "Represents <vkCmdCopyAccelerationStructureToMemoryKHR>"
                   ((command-buffer cffi:foreign-pointer) (info (or vk:copy-acceleration-structure-to-memory-info-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (info '(:struct %vk:copy-acceleration-structure-to-memory-info-khr) info :in))

(defvk-simple-fun (copy-acceleration-structure-to-memory-khr
                   %vk:copy-acceleration-structure-to-memory-khr
                   "Represents <vkCopyAccelerationStructureToMemoryKHR>"
                   ((device cffi:foreign-pointer) (info (or vk:copy-acceleration-structure-to-memory-info-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:copy-acceleration-structure-to-memory-info-khr) info :in))

(defvk-simple-fun (cmd-copy-memory-to-acceleration-structure-khr
                   %vk:cmd-copy-memory-to-acceleration-structure-khr
                   "Represents <vkCmdCopyMemoryToAccelerationStructureKHR>"
                   ((command-buffer cffi:foreign-pointer) (info (or vk:copy-memory-to-acceleration-structure-info-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (info '(:struct %vk:copy-memory-to-acceleration-structure-info-khr) info :in))

(defvk-simple-fun (copy-memory-to-acceleration-structure-khr
                   %vk:copy-memory-to-acceleration-structure-khr
                   "Represents <vkCopyMemoryToAccelerationStructureKHR>"
                   ((device cffi:foreign-pointer) (info (or vk:copy-memory-to-acceleration-structure-info-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:copy-memory-to-acceleration-structure-info-khr) info :in))

(defvk-simple-fun (cmd-write-acceleration-structures-properties-khr
                   %vk:cmd-write-acceleration-structures-properties-khr
                   "Represents <vkCmdWriteAccelerationStructuresPropertiesKHR>"
                   ((command-buffer cffi:foreign-pointer) (acceleration-structures list) (query-type keyword) (query-pool cffi:foreign-pointer) (first-query unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (acceleration-structure-count :uint32 (length acceleration-structures) :in :raw)
  (acceleration-structures '%vk:acceleration-structure-khr acceleration-structures :in :handle :list)
  (query-type '%vk:query-type query-type :in :raw)
  (query-pool '%vk:query-pool query-pool :in :handle)
  (first-query :uint32 first-query :in :raw))

(defvk-simple-fun (cmd-write-acceleration-structures-properties-nv
                   %vk:cmd-write-acceleration-structures-properties-nv
                   "Represents <vkCmdWriteAccelerationStructuresPropertiesNV>"
                   ((command-buffer cffi:foreign-pointer) (acceleration-structures list) (query-type keyword) (query-pool cffi:foreign-pointer) (first-query unsigned-byte))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (acceleration-structure-count :uint32 (length acceleration-structures) :in :raw)
  (acceleration-structures '%vk:acceleration-structure-khr acceleration-structures :in :handle :list)
  (query-type '%vk:query-type query-type :in :raw)
  (query-pool '%vk:query-pool query-pool :in :handle)
  (first-query :uint32 first-query :in :raw))

(defvk-simple-fun (cmd-build-acceleration-structure-nv
                   %vk:cmd-build-acceleration-structure-nv
                   "Represents <vkCmdBuildAccelerationStructureNV>"
                   ((command-buffer cffi:foreign-pointer) (info (or vk:acceleration-structure-info-nv cffi:foreign-pointer)) (instance-offset unsigned-byte) (update boolean) (dst cffi:foreign-pointer) (scratch cffi:foreign-pointer) (scratch-offset unsigned-byte))
                   (((instance-data (cffi:null-pointer)) cffi:foreign-pointer) ((src (cffi:null-pointer)) cffi:foreign-pointer))
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (info '(:struct %vk:acceleration-structure-info-nv) info :in)
  (instance-data '%vk:buffer instance-data :in :handle :optional)
  (instance-offset '%vk:device-size instance-offset :in :raw)
  (update '%vk:bool32 update :in :raw)
  (dst '%vk:acceleration-structure-khr dst :in :handle)
  (src '%vk:acceleration-structure-khr src :in :handle :optional)
  (scratch '%vk:buffer scratch :in :handle)
  (scratch-offset '%vk:device-size scratch-offset :in :raw))

(defvk-simple-fun (write-acceleration-structures-properties-khr
                   %vk:write-acceleration-structures-properties-khr
                   "Represents <vkWriteAccelerationStructuresPropertiesKHR>"
                   ((device cffi:foreign-pointer) (acceleration-structures list) (query-type keyword) (data-size unsigned-byte) (data cffi:foreign-pointer) (stride unsigned-byte))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (acceleration-structure-count :uint32 (length acceleration-structures) :in :raw)
  (acceleration-structures '%vk:acceleration-structure-khr acceleration-structures :in :handle :list)
  (query-type '%vk:query-type query-type :in :raw)
  (data-size '%vk:size-t data-size :in :raw)
  (data '(:pointer :void) data :in :handle)
  (stride '%vk:size-t stride :in :raw))

(defvk-simple-fun (cmd-trace-rays-khr
                   %vk:cmd-trace-rays-khr
                   "Represents <vkCmdTraceRaysKHR>"
                   ((command-buffer cffi:foreign-pointer) (raygen-shader-binding-table (or vk:strided-buffer-region-khr cffi:foreign-pointer)) (miss-shader-binding-table (or vk:strided-buffer-region-khr cffi:foreign-pointer)) (hit-shader-binding-table (or vk:strided-buffer-region-khr cffi:foreign-pointer)) (callable-shader-binding-table (or vk:strided-buffer-region-khr cffi:foreign-pointer)) (width unsigned-byte) (height unsigned-byte) (depth unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (raygen-shader-binding-table '(:struct %vk:strided-buffer-region-khr) raygen-shader-binding-table :in)
  (miss-shader-binding-table '(:struct %vk:strided-buffer-region-khr) miss-shader-binding-table :in)
  (hit-shader-binding-table '(:struct %vk:strided-buffer-region-khr) hit-shader-binding-table :in)
  (callable-shader-binding-table '(:struct %vk:strided-buffer-region-khr) callable-shader-binding-table :in)
  (width :uint32 width :in :raw)
  (height :uint32 height :in :raw)
  (depth :uint32 depth :in :raw))

(defvk-simple-fun (cmd-trace-rays-nv
                   %vk:cmd-trace-rays-nv
                   "Represents <vkCmdTraceRaysNV>"
                   ((command-buffer cffi:foreign-pointer) (raygen-shader-binding-table-buffer cffi:foreign-pointer) (raygen-shader-binding-offset unsigned-byte) (miss-shader-binding-offset unsigned-byte) (miss-shader-binding-stride unsigned-byte) (hit-shader-binding-offset unsigned-byte) (hit-shader-binding-stride unsigned-byte) (callable-shader-binding-offset unsigned-byte) (callable-shader-binding-stride unsigned-byte) (width unsigned-byte) (height unsigned-byte) (depth unsigned-byte))
                   (((miss-shader-binding-table-buffer (cffi:null-pointer)) cffi:foreign-pointer) ((hit-shader-binding-table-buffer (cffi:null-pointer)) cffi:foreign-pointer) ((callable-shader-binding-table-buffer (cffi:null-pointer)) cffi:foreign-pointer))
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (raygen-shader-binding-table-buffer '%vk:buffer raygen-shader-binding-table-buffer :in :handle)
  (raygen-shader-binding-offset '%vk:device-size raygen-shader-binding-offset :in :raw)
  (miss-shader-binding-table-buffer '%vk:buffer miss-shader-binding-table-buffer :in :handle :optional)
  (miss-shader-binding-offset '%vk:device-size miss-shader-binding-offset :in :raw)
  (miss-shader-binding-stride '%vk:device-size miss-shader-binding-stride :in :raw)
  (hit-shader-binding-table-buffer '%vk:buffer hit-shader-binding-table-buffer :in :handle :optional)
  (hit-shader-binding-offset '%vk:device-size hit-shader-binding-offset :in :raw)
  (hit-shader-binding-stride '%vk:device-size hit-shader-binding-stride :in :raw)
  (callable-shader-binding-table-buffer '%vk:buffer callable-shader-binding-table-buffer :in :handle :optional)
  (callable-shader-binding-offset '%vk:device-size callable-shader-binding-offset :in :raw)
  (callable-shader-binding-stride '%vk:device-size callable-shader-binding-stride :in :raw)
  (width :uint32 width :in :raw)
  (height :uint32 height :in :raw)
  (depth :uint32 depth :in :raw))

(defvk-simple-fun (get-ray-tracing-shader-group-handles-khr
                   %vk:get-ray-tracing-shader-group-handles-khr
                   "Represents <vkGetRayTracingShaderGroupHandlesKHR>"
                   ((device cffi:foreign-pointer) (pipeline cffi:foreign-pointer) (first-group unsigned-byte) (group-count unsigned-byte) (data-size unsigned-byte) (data cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (pipeline '%vk:pipeline pipeline :in :handle)
  (first-group :uint32 first-group :in :raw)
  (group-count :uint32 group-count :in :raw)
  (data-size '%vk:size-t data-size :in :raw)
  (data '(:pointer :void) data :in :handle))

(defvk-simple-fun (get-ray-tracing-shader-group-handles-nv
                   %vk:get-ray-tracing-shader-group-handles-nv
                   "Represents <vkGetRayTracingShaderGroupHandlesNV>"
                   ((device cffi:foreign-pointer) (pipeline cffi:foreign-pointer) (first-group unsigned-byte) (group-count unsigned-byte) (data-size unsigned-byte) (data cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (pipeline '%vk:pipeline pipeline :in :handle)
  (first-group :uint32 first-group :in :raw)
  (group-count :uint32 group-count :in :raw)
  (data-size '%vk:size-t data-size :in :raw)
  (data '(:pointer :void) data :in :handle))

(defvk-simple-fun (get-ray-tracing-capture-replay-shader-group-handles-khr
                   %vk:get-ray-tracing-capture-replay-shader-group-handles-khr
                   "Represents <vkGetRayTracingCaptureReplayShaderGroupHandlesKHR>"
                   ((device cffi:foreign-pointer) (pipeline cffi:foreign-pointer) (first-group unsigned-byte) (group-count unsigned-byte) (data-size unsigned-byte) (data cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (pipeline '%vk:pipeline pipeline :in :handle)
  (first-group :uint32 first-group :in :raw)
  (group-count :uint32 group-count :in :raw)
  (data-size '%vk:size-t data-size :in :raw)
  (data '(:pointer :void) data :in :handle))

(defvk-simple-fun (get-acceleration-structure-handle-nv
                   %vk:get-acceleration-structure-handle-nv
                   "Represents <vkGetAccelerationStructureHandleNV>"
                   ((device cffi:foreign-pointer) (acceleration-structure cffi:foreign-pointer) (data-size unsigned-byte) (data cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (acceleration-structure '%vk:acceleration-structure-khr acceleration-structure :in :handle)
  (data-size '%vk:size-t data-size :in :raw)
  (data '(:pointer :void) data :in :handle))

(defvk-create-handles-fun (create-ray-tracing-pipelines-nv
                           %vk:create-ray-tracing-pipelines-nv
                           "Represents <vkCreateRayTracingPipelinesNV>"
                           ((device cffi:foreign-pointer) (create-infos list))
                           (((pipeline-cache (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                           (length create-infos)
                           t)
  (device '%vk:device device :in :handle)
  (pipeline-cache '%vk:pipeline-cache pipeline-cache :in :handle :optional)
  (create-info-count :uint32 (length create-infos) :in :raw)
  (create-infos '(:struct %vk:ray-tracing-pipeline-create-info-nv) create-infos :in :list)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (pipelines '%vk:pipeline pipelines :out :handle :list))

(defvk-create-handles-fun (create-ray-tracing-pipelines-khr
                           %vk:create-ray-tracing-pipelines-khr
                           "Represents <vkCreateRayTracingPipelinesKHR>"
                           ((device cffi:foreign-pointer) (create-infos list))
                           (((pipeline-cache (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                           (length create-infos))
  (device '%vk:device device :in :handle)
  (pipeline-cache '%vk:pipeline-cache pipeline-cache :in :handle :optional)
  (create-info-count :uint32 (length create-infos) :in :raw)
  (create-infos '(:struct %vk:ray-tracing-pipeline-create-info-khr) create-infos :in :list)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (pipelines '%vk:pipeline pipelines :out :handle :list))

(defvk-enumerate-fun (get-physical-device-cooperative-matrix-properties-nv
                      %vk:get-physical-device-cooperative-matrix-properties-nv
                      "Represents <vkGetPhysicalDeviceCooperativeMatrixPropertiesNV>"
                      ((physical-device cffi:foreign-pointer))
                      ()
                      property-count
                      properties
                      nil
                      t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (property-count :uint32 property-count :out)
  (properties '(:struct %vk:cooperative-matrix-properties-nv) properties :out :list))

(defvk-simple-fun (cmd-trace-rays-indirect-khr
                   %vk:cmd-trace-rays-indirect-khr
                   "Represents <vkCmdTraceRaysIndirectKHR>"
                   ((command-buffer cffi:foreign-pointer) (raygen-shader-binding-table (or vk:strided-buffer-region-khr cffi:foreign-pointer)) (miss-shader-binding-table (or vk:strided-buffer-region-khr cffi:foreign-pointer)) (hit-shader-binding-table (or vk:strided-buffer-region-khr cffi:foreign-pointer)) (callable-shader-binding-table (or vk:strided-buffer-region-khr cffi:foreign-pointer)) (buffer cffi:foreign-pointer) (offset unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (raygen-shader-binding-table '(:struct %vk:strided-buffer-region-khr) raygen-shader-binding-table :in)
  (miss-shader-binding-table '(:struct %vk:strided-buffer-region-khr) miss-shader-binding-table :in)
  (hit-shader-binding-table '(:struct %vk:strided-buffer-region-khr) hit-shader-binding-table :in)
  (callable-shader-binding-table '(:struct %vk:strided-buffer-region-khr) callable-shader-binding-table :in)
  (buffer '%vk:buffer buffer :in :handle)
  (offset '%vk:device-size offset :in :raw))

(defvk-simple-fun (get-device-acceleration-structure-compatibility-khr
                   %vk:get-device-acceleration-structure-compatibility-khr
                   "Represents <vkGetDeviceAccelerationStructureCompatibilityKHR>"
                   ((device cffi:foreign-pointer) (version (or vk:acceleration-structure-version-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (version '(:struct %vk:acceleration-structure-version-khr) version :in))

(defvk-simple-fun (get-image-view-handle-nv-x
                   %vk:get-image-view-handle-nv-x
                   "Represents <vkGetImageViewHandleNVX>"
                   ((device cffi:foreign-pointer) (info (or vk:image-view-handle-info-nv-x cffi:foreign-pointer)))
                   ()
                  :uint32
                  t)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:image-view-handle-info-nv-x) info :in))

(defvk-get-struct-fun (get-image-view-address-nv-x
                       %vk:get-image-view-address-nv-x
                       "Represents <vkGetImageViewAddressNVX>"
                       ((device cffi:foreign-pointer) (image-view cffi:foreign-pointer))
                       ()
                       t)
  (device '%vk:device device :in :handle)
  (image-view '%vk:image-view image-view :in :handle)
  (properties '(:struct %vk:image-view-address-properties-nv-x) properties :out))

(defvk-enumerate-fun (get-physical-device-surface-present-modes-2-ext
                      %vk:get-physical-device-surface-present-modes-2-ext
                      "Represents <vkGetPhysicalDeviceSurfacePresentModes2EXT>"
                      ((physical-device cffi:foreign-pointer) (surface-info (or vk:physical-device-surface-info-2-khr cffi:foreign-pointer)))
                      ()
                      present-mode-count
                      present-modes
                      nil
                      t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (surface-info '(:struct %vk:physical-device-surface-info-2-khr) surface-info :in)
  (present-mode-count :uint32 present-mode-count :out)
  (present-modes '%vk:present-mode-khr present-modes :out :raw :list))

(defvk-get-struct-fun (get-device-group-surface-present-modes-2-ext
                       %vk:get-device-group-surface-present-modes-2-ext
                       "Represents <vkGetDeviceGroupSurfacePresentModes2EXT>"
                       ((device cffi:foreign-pointer) (surface-info (or vk:physical-device-surface-info-2-khr cffi:foreign-pointer)))
                       ()
                       t)
  (device '%vk:device device :in :handle)
  (surface-info '(:struct %vk:physical-device-surface-info-2-khr) surface-info :in)
  (modes '%vk:device-group-present-mode-flags-khr modes :out :raw))

(defvk-simple-fun (acquire-full-screen-exclusive-mode-ext
                   %vk:acquire-full-screen-exclusive-mode-ext
                   "Represents <vkAcquireFullScreenExclusiveModeEXT>"
                   ((device cffi:foreign-pointer) (swapchain cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (swapchain '%vk:swapchain-khr swapchain :in :handle))

(defvk-simple-fun (release-full-screen-exclusive-mode-ext
                   %vk:release-full-screen-exclusive-mode-ext
                   "Represents <vkReleaseFullScreenExclusiveModeEXT>"
                   ((device cffi:foreign-pointer) (swapchain cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (swapchain '%vk:swapchain-khr swapchain :in :handle))

(defvk-enumerate-two-arrays-fun (enumerate-physical-device-queue-family-performance-query-counters-khr
                                 %vk:enumerate-physical-device-queue-family-performance-query-counters-khr
                                 "Represents <vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR>"
                                 ((physical-device cffi:foreign-pointer) (queue-family-index unsigned-byte))
                                 ()
                                 counter-count
                                 (counters counter-descriptions)
                                 nil)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (queue-family-index :uint32 queue-family-index :in :raw)
  (counter-count :uint32 counter-count :out)
  (counters '(:struct %vk:performance-counter-khr) counters :out :list)
  (counter-descriptions '(:struct %vk:performance-counter-description-khr) counter-descriptions :out :list))

(defvk-create-handle-fun (get-physical-device-queue-family-performance-query-passes-khr
                          %vk:get-physical-device-queue-family-performance-query-passes-khr
                          "Represents <vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR>"
                          ((physical-device cffi:foreign-pointer) (performance-query-create-info (or vk:query-pool-performance-create-info-khr cffi:foreign-pointer)))
                          ()
                          t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (performance-query-create-info '(:struct %vk:query-pool-performance-create-info-khr) performance-query-create-info :in)
  (num-passes :uint32 num-passes :out))

(defvk-simple-fun (acquire-profiling-lock-khr
                   %vk:acquire-profiling-lock-khr
                   "Represents <vkAcquireProfilingLockKHR>"
                   ((device cffi:foreign-pointer) (info (or vk:acquire-profiling-lock-info-khr cffi:foreign-pointer)))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:acquire-profiling-lock-info-khr) info :in))

(defvk-simple-fun (release-profiling-lock-khr
                   %vk:release-profiling-lock-khr
                   "Represents <vkReleaseProfilingLockKHR>"
                   ((device cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle))

(defvk-get-struct-fun (get-image-drm-format-modifier-properties-ext
                       %vk:get-image-drm-format-modifier-properties-ext
                       "Represents <vkGetImageDrmFormatModifierPropertiesEXT>"
                       ((device cffi:foreign-pointer) (image cffi:foreign-pointer))
                       ()
                       t)
  (device '%vk:device device :in :handle)
  (image '%vk:image image :in :handle)
  (properties '(:struct %vk:image-drm-format-modifier-properties-ext) properties :out))

(defvk-simple-fun (get-buffer-opaque-capture-address
                   %vk:get-buffer-opaque-capture-address
                   "Represents <vkGetBufferOpaqueCaptureAddress>"
                   ((device cffi:foreign-pointer) (info (or vk:buffer-device-address-info cffi:foreign-pointer)))
                   ()
                  :uint64)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:buffer-device-address-info) info :in))

(defvk-simple-fun (get-buffer-opaque-capture-address-khr
                   %vk:get-buffer-opaque-capture-address-khr
                   "Represents <vkGetBufferOpaqueCaptureAddressKHR>"
                   ((device cffi:foreign-pointer) (info (or vk:buffer-device-address-info cffi:foreign-pointer)))
                   ()
                  :uint64)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:buffer-device-address-info) info :in))

(defvk-simple-fun (get-buffer-device-address
                   %vk:get-buffer-device-address
                   "Represents <vkGetBufferDeviceAddress>"
                   ((device cffi:foreign-pointer) (info (or vk:buffer-device-address-info cffi:foreign-pointer)))
                   ()
                  '%vk:device-address)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:buffer-device-address-info) info :in))

(defvk-simple-fun (get-buffer-device-address-ext
                   %vk:get-buffer-device-address-ext
                   "Represents <vkGetBufferDeviceAddressEXT>"
                   ((device cffi:foreign-pointer) (info (or vk:buffer-device-address-info cffi:foreign-pointer)))
                   ()
                  '%vk:device-address
                  t)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:buffer-device-address-info) info :in))

(defvk-simple-fun (get-buffer-device-address-khr
                   %vk:get-buffer-device-address-khr
                   "Represents <vkGetBufferDeviceAddressKHR>"
                   ((device cffi:foreign-pointer) (info (or vk:buffer-device-address-info cffi:foreign-pointer)))
                   ()
                  '%vk:device-address)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:buffer-device-address-info) info :in))

(defvk-create-handle-fun (create-headless-surface-ext
                          %vk:create-headless-surface-ext
                          "Represents <vkCreateHeadlessSurfaceEXT>"
                          ((instance cffi:foreign-pointer) (create-info (or vk:headless-surface-create-info-ext cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (instance '%vk:instance instance :in :handle)
  (create-info '(:struct %vk:headless-surface-create-info-ext) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (surface '%vk:surface-khr surface :out :handle))

(defvk-enumerate-fun (get-physical-device-supported-framebuffer-mixed-samples-combinations-nv
                      %vk:get-physical-device-supported-framebuffer-mixed-samples-combinations-nv
                      "Represents <vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV>"
                      ((physical-device cffi:foreign-pointer))
                      ()
                      combination-count
                      combinations
                      nil
                      t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (combination-count :uint32 combination-count :out)
  (combinations '(:struct %vk:framebuffer-mixed-samples-combination-nv) combinations :out :list))

(defvk-simple-fun (initialize-performance-api-intel
                   %vk:initialize-performance-api-intel
                   "Represents <vkInitializePerformanceApiINTEL>"
                   ((device cffi:foreign-pointer) (initialize-info (or vk:initialize-performance-api-info-intel cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (initialize-info '(:struct %vk:initialize-performance-api-info-intel) initialize-info :in))

(defvk-simple-fun (uninitialize-performance-api-intel
                   %vk:uninitialize-performance-api-intel
                   "Represents <vkUninitializePerformanceApiINTEL>"
                   ((device cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle))

(defvk-simple-fun (cmd-set-performance-marker-intel
                   %vk:cmd-set-performance-marker-intel
                   "Represents <vkCmdSetPerformanceMarkerINTEL>"
                   ((command-buffer cffi:foreign-pointer) (marker-info (or vk:performance-marker-info-intel cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (marker-info '(:struct %vk:performance-marker-info-intel) marker-info :in))

(defvk-simple-fun (cmd-set-performance-stream-marker-intel
                   %vk:cmd-set-performance-stream-marker-intel
                   "Represents <vkCmdSetPerformanceStreamMarkerINTEL>"
                   ((command-buffer cffi:foreign-pointer) (marker-info (or vk:performance-stream-marker-info-intel cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (marker-info '(:struct %vk:performance-stream-marker-info-intel) marker-info :in))

(defvk-simple-fun (cmd-set-performance-override-intel
                   %vk:cmd-set-performance-override-intel
                   "Represents <vkCmdSetPerformanceOverrideINTEL>"
                   ((command-buffer cffi:foreign-pointer) (override-info (or vk:performance-override-info-intel cffi:foreign-pointer)))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (override-info '(:struct %vk:performance-override-info-intel) override-info :in))

(defvk-create-handle-fun (acquire-performance-configuration-intel
                          %vk:acquire-performance-configuration-intel
                          "Represents <vkAcquirePerformanceConfigurationINTEL>"
                          ((device cffi:foreign-pointer) (acquire-info (or vk:performance-configuration-acquire-info-intel cffi:foreign-pointer)))
                          ()
                          nil
                          t)
  (device '%vk:device device :in :handle)
  (acquire-info '(:struct %vk:performance-configuration-acquire-info-intel) acquire-info :in)
  (configuration '%vk:performance-configuration-intel configuration :out :handle))

(defvk-simple-fun (release-performance-configuration-intel
                   %vk:release-performance-configuration-intel
                   "Represents <vkReleasePerformanceConfigurationINTEL>"
                   ((device cffi:foreign-pointer))
                   (((configuration (cffi:null-pointer)) cffi:foreign-pointer))
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (configuration '%vk:performance-configuration-intel configuration :in :handle :optional))

(defvk-simple-fun (queue-set-performance-configuration-intel
                   %vk:queue-set-performance-configuration-intel
                   "Represents <vkQueueSetPerformanceConfigurationINTEL>"
                   ((queue cffi:foreign-pointer) (configuration cffi:foreign-pointer))
                   ()
                  nil
                  t)
  (queue '%vk:queue queue :in :handle)
  (configuration '%vk:performance-configuration-intel configuration :in :handle))

(defvk-get-struct-fun (get-performance-parameter-intel
                       %vk:get-performance-parameter-intel
                       "Represents <vkGetPerformanceParameterINTEL>"
                       ((device cffi:foreign-pointer) (parameter keyword))
                       ()
                       t)
  (device '%vk:device device :in :handle)
  (parameter '%vk:performance-parameter-type-intel parameter :in :raw)
  (value '(:struct %vk:performance-value-intel) value :out))

(defvk-simple-fun (get-device-memory-opaque-capture-address
                   %vk:get-device-memory-opaque-capture-address
                   "Represents <vkGetDeviceMemoryOpaqueCaptureAddress>"
                   ((device cffi:foreign-pointer) (info (or vk:device-memory-opaque-capture-address-info cffi:foreign-pointer)))
                   ()
                  :uint64)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:device-memory-opaque-capture-address-info) info :in))

(defvk-simple-fun (get-device-memory-opaque-capture-address-khr
                   %vk:get-device-memory-opaque-capture-address-khr
                   "Represents <vkGetDeviceMemoryOpaqueCaptureAddressKHR>"
                   ((device cffi:foreign-pointer) (info (or vk:device-memory-opaque-capture-address-info cffi:foreign-pointer)))
                   ()
                  :uint64)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:device-memory-opaque-capture-address-info) info :in))

(defvk-enumerate-fun (get-pipeline-executable-properties-khr
                      %vk:get-pipeline-executable-properties-khr
                      "Represents <vkGetPipelineExecutablePropertiesKHR>"
                      ((device cffi:foreign-pointer) (pipeline-info (or vk:pipeline-info-khr cffi:foreign-pointer)))
                      ()
                      executable-count
                      properties
                      nil)
  (device '%vk:device device :in :handle)
  (pipeline-info '(:struct %vk:pipeline-info-khr) pipeline-info :in)
  (executable-count :uint32 executable-count :out)
  (properties '(:struct %vk:pipeline-executable-properties-khr) properties :out :list))

(defvk-enumerate-fun (get-pipeline-executable-statistics-khr
                      %vk:get-pipeline-executable-statistics-khr
                      "Represents <vkGetPipelineExecutableStatisticsKHR>"
                      ((device cffi:foreign-pointer) (executable-info (or vk:pipeline-executable-info-khr cffi:foreign-pointer)))
                      ()
                      statistic-count
                      statistics
                      nil)
  (device '%vk:device device :in :handle)
  (executable-info '(:struct %vk:pipeline-executable-info-khr) executable-info :in)
  (statistic-count :uint32 statistic-count :out)
  (statistics '(:struct %vk:pipeline-executable-statistic-khr) statistics :out :list))

(defvk-enumerate-fun (get-pipeline-executable-internal-representations-khr
                      %vk:get-pipeline-executable-internal-representations-khr
                      "Represents <vkGetPipelineExecutableInternalRepresentationsKHR>"
                      ((device cffi:foreign-pointer) (executable-info (or vk:pipeline-executable-info-khr cffi:foreign-pointer)))
                      ()
                      internal-representation-count
                      internal-representations
                      nil)
  (device '%vk:device device :in :handle)
  (executable-info '(:struct %vk:pipeline-executable-info-khr) executable-info :in)
  (internal-representation-count :uint32 internal-representation-count :out)
  (internal-representations '(:struct %vk:pipeline-executable-internal-representation-khr) internal-representations :out :list))

(defvk-simple-fun (cmd-set-line-stipple-ext
                   %vk:cmd-set-line-stipple-ext
                   "Represents <vkCmdSetLineStippleEXT>"
                   ((command-buffer cffi:foreign-pointer) (line-stipple-factor unsigned-byte) (line-stipple-pattern unsigned-byte))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (line-stipple-factor :uint32 line-stipple-factor :in :raw)
  (line-stipple-pattern :uint16 line-stipple-pattern :in :raw))

(defvk-enumerate-fun (get-physical-device-tool-properties-ext
                      %vk:get-physical-device-tool-properties-ext
                      "Represents <vkGetPhysicalDeviceToolPropertiesEXT>"
                      ((physical-device cffi:foreign-pointer))
                      ()
                      tool-count
                      tool-properties
                      nil
                      t)
  (physical-device '%vk:physical-device physical-device :in :handle)
  (tool-count :uint32 tool-count :out)
  (tool-properties '(:struct %vk:physical-device-tool-properties-ext) tool-properties :out :list))

(defvk-create-handle-fun (create-acceleration-structure-khr
                          %vk:create-acceleration-structure-khr
                          "Represents <vkCreateAccelerationStructureKHR>"
                          ((device cffi:foreign-pointer) (create-info (or vk:acceleration-structure-create-info-khr cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:acceleration-structure-create-info-khr) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (acceleration-structure '%vk:acceleration-structure-khr acceleration-structure :out :handle))

(defvk-simple-fun (cmd-build-acceleration-structure-khr
                   %vk:cmd-build-acceleration-structure-khr
                   "Represents <vkCmdBuildAccelerationStructureKHR>"
                   ((command-buffer cffi:foreign-pointer) (infos list) (p-offset-infos list))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (info-count :uint32 (length p-offset-infos) :in :raw)
  (infos '(:struct %vk:acceleration-structure-build-geometry-info-khr) infos :in :list)
  (p-offset-infos '(:struct %vk:acceleration-structure-build-offset-info-khr) p-offset-infos :in :list))

(defvk-simple-fun (cmd-build-acceleration-structure-indirect-khr
                   %vk:cmd-build-acceleration-structure-indirect-khr
                   "Represents <vkCmdBuildAccelerationStructureIndirectKHR>"
                   ((command-buffer cffi:foreign-pointer) (info (or vk:acceleration-structure-build-geometry-info-khr cffi:foreign-pointer)) (indirect-buffer cffi:foreign-pointer) (indirect-offset unsigned-byte) (indirect-stride unsigned-byte))
                   ()
                  nil)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (info '(:struct %vk:acceleration-structure-build-geometry-info-khr) info :in)
  (indirect-buffer '%vk:buffer indirect-buffer :in :handle)
  (indirect-offset '%vk:device-size indirect-offset :in :raw)
  (indirect-stride :uint32 indirect-stride :in :raw))

(defvk-simple-fun (build-acceleration-structure-khr
                   %vk:build-acceleration-structure-khr
                   "Represents <vkBuildAccelerationStructureKHR>"
                   ((device cffi:foreign-pointer) (infos list) (p-offset-infos list))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (info-count :uint32 (length p-offset-infos) :in :raw)
  (infos '(:struct %vk:acceleration-structure-build-geometry-info-khr) infos :in :list)
  (p-offset-infos '(:struct %vk:acceleration-structure-build-offset-info-khr) p-offset-infos :in :list))

(defvk-simple-fun (get-acceleration-structure-device-address-khr
                   %vk:get-acceleration-structure-device-address-khr
                   "Represents <vkGetAccelerationStructureDeviceAddressKHR>"
                   ((device cffi:foreign-pointer) (info (or vk:acceleration-structure-device-address-info-khr cffi:foreign-pointer)))
                   ()
                  '%vk:device-address)
  (device '%vk:device device :in :handle)
  (info '(:struct %vk:acceleration-structure-device-address-info-khr) info :in))

(defvk-create-handle-fun (create-deferred-operation-khr
                          %vk:create-deferred-operation-khr
                          "Represents <vkCreateDeferredOperationKHR>"
                          ((device cffi:foreign-pointer))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil)
  (device '%vk:device device :in :handle)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (deferred-operation '%vk:deferred-operation-khr deferred-operation :out :handle))

(defvk-simple-fun (destroy-deferred-operation-khr
                   %vk:destroy-deferred-operation-khr
                   "Represents <vkDestroyDeferredOperationKHR>"
                   ((device cffi:foreign-pointer))
                   (((operation (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil)
  (device '%vk:device device :in :handle)
  (operation '%vk:deferred-operation-khr operation :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (get-deferred-operation-max-concurrency-khr
                   %vk:get-deferred-operation-max-concurrency-khr
                   "Represents <vkGetDeferredOperationMaxConcurrencyKHR>"
                   ((device cffi:foreign-pointer) (operation cffi:foreign-pointer))
                   ()
                  :uint32)
  (device '%vk:device device :in :handle)
  (operation '%vk:deferred-operation-khr operation :in :handle))

(defvk-simple-fun (get-deferred-operation-result-khr
                   %vk:get-deferred-operation-result-khr
                   "Represents <vkGetDeferredOperationResultKHR>"
                   ((device cffi:foreign-pointer) (operation cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (operation '%vk:deferred-operation-khr operation :in :handle))

(defvk-simple-fun (deferred-operation-join-khr
                   %vk:deferred-operation-join-khr
                   "Represents <vkDeferredOperationJoinKHR>"
                   ((device cffi:foreign-pointer) (operation cffi:foreign-pointer))
                   ()
                  nil)
  (device '%vk:device device :in :handle)
  (operation '%vk:deferred-operation-khr operation :in :handle))

(defvk-simple-fun (cmd-set-cull-mode-ext
                   %vk:cmd-set-cull-mode-ext
                   "Represents <vkCmdSetCullModeEXT>"
                   ((command-buffer cffi:foreign-pointer))
                   (((cull-mode nil) (or unsigned-byte list)))
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (cull-mode '%vk:cull-mode-flags cull-mode :in :raw :optional))

(defvk-simple-fun (cmd-set-front-face-ext
                   %vk:cmd-set-front-face-ext
                   "Represents <vkCmdSetFrontFaceEXT>"
                   ((command-buffer cffi:foreign-pointer) (front-face keyword))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (front-face '%vk:front-face front-face :in :raw))

(defvk-simple-fun (cmd-set-primitive-topology-ext
                   %vk:cmd-set-primitive-topology-ext
                   "Represents <vkCmdSetPrimitiveTopologyEXT>"
                   ((command-buffer cffi:foreign-pointer) (primitive-topology keyword))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (primitive-topology '%vk:primitive-topology primitive-topology :in :raw))

(defvk-simple-fun (cmd-set-viewport-with-count-ext
                   %vk:cmd-set-viewport-with-count-ext
                   "Represents <vkCmdSetViewportWithCountEXT>"
                   ((command-buffer cffi:foreign-pointer) (viewports list))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (viewport-count :uint32 (length viewports) :in :raw)
  (viewports '(:struct %vk:viewport) viewports :in :list))

(defvk-simple-fun (cmd-set-scissor-with-count-ext
                   %vk:cmd-set-scissor-with-count-ext
                   "Represents <vkCmdSetScissorWithCountEXT>"
                   ((command-buffer cffi:foreign-pointer) (scissors list))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (scissor-count :uint32 (length scissors) :in :raw)
  (scissors '(:struct %vk:rect-2d) scissors :in :list))

(defvk-simple-fun (cmd-bind-vertex-buffers-2-ext
                   %vk:cmd-bind-vertex-buffers-2-ext
                   "Represents <vkCmdBindVertexBuffers2EXT>"
                   ((command-buffer cffi:foreign-pointer) (first-binding unsigned-byte) (buffers list) (offsets list))
                   (((sizes nil) list) ((strides nil) list))
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (first-binding :uint32 first-binding :in :raw)
  (binding-count :uint32 (length strides) :in :raw)
  (buffers '%vk:buffer buffers :in :handle :list)
  (offsets '%vk:device-size offsets :in :list)
  (sizes '%vk:device-size sizes :in :list :optional)
  (strides '%vk:device-size strides :in :list :optional))

(defvk-simple-fun (cmd-set-depth-test-enable-ext
                   %vk:cmd-set-depth-test-enable-ext
                   "Represents <vkCmdSetDepthTestEnableEXT>"
                   ((command-buffer cffi:foreign-pointer) (depth-test-enable boolean))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (depth-test-enable '%vk:bool32 depth-test-enable :in :raw))

(defvk-simple-fun (cmd-set-depth-write-enable-ext
                   %vk:cmd-set-depth-write-enable-ext
                   "Represents <vkCmdSetDepthWriteEnableEXT>"
                   ((command-buffer cffi:foreign-pointer) (depth-write-enable boolean))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (depth-write-enable '%vk:bool32 depth-write-enable :in :raw))

(defvk-simple-fun (cmd-set-depth-compare-op-ext
                   %vk:cmd-set-depth-compare-op-ext
                   "Represents <vkCmdSetDepthCompareOpEXT>"
                   ((command-buffer cffi:foreign-pointer) (depth-compare-op keyword))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (depth-compare-op '%vk:compare-op depth-compare-op :in :raw))

(defvk-simple-fun (cmd-set-depth-bounds-test-enable-ext
                   %vk:cmd-set-depth-bounds-test-enable-ext
                   "Represents <vkCmdSetDepthBoundsTestEnableEXT>"
                   ((command-buffer cffi:foreign-pointer) (depth-bounds-test-enable boolean))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (depth-bounds-test-enable '%vk:bool32 depth-bounds-test-enable :in :raw))

(defvk-simple-fun (cmd-set-stencil-test-enable-ext
                   %vk:cmd-set-stencil-test-enable-ext
                   "Represents <vkCmdSetStencilTestEnableEXT>"
                   ((command-buffer cffi:foreign-pointer) (stencil-test-enable boolean))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (stencil-test-enable '%vk:bool32 stencil-test-enable :in :raw))

(defvk-simple-fun (cmd-set-stencil-op-ext
                   %vk:cmd-set-stencil-op-ext
                   "Represents <vkCmdSetStencilOpEXT>"
                   ((command-buffer cffi:foreign-pointer) (face-mask (or unsigned-byte list)) (fail-op keyword) (pass-op keyword) (depth-fail-op keyword) (compare-op keyword))
                   ()
                  nil
                  t)
  (command-buffer '%vk:command-buffer command-buffer :in :handle)
  (face-mask '%vk:stencil-face-flags face-mask :in :raw)
  (fail-op '%vk:stencil-op fail-op :in :raw)
  (pass-op '%vk:stencil-op pass-op :in :raw)
  (depth-fail-op '%vk:stencil-op depth-fail-op :in :raw)
  (compare-op '%vk:compare-op compare-op :in :raw))

(defvk-create-handle-fun (create-private-data-slot-ext
                          %vk:create-private-data-slot-ext
                          "Represents <vkCreatePrivateDataSlotEXT>"
                          ((device cffi:foreign-pointer) (create-info (or vk:private-data-slot-create-info-ext cffi:foreign-pointer)))
                          (((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                          nil
                          t)
  (device '%vk:device device :in :handle)
  (create-info '(:struct %vk:private-data-slot-create-info-ext) create-info :in)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional)
  (private-data-slot '%vk:private-data-slot-ext private-data-slot :out :handle))

(defvk-simple-fun (destroy-private-data-slot-ext
                   %vk:destroy-private-data-slot-ext
                   "Represents <vkDestroyPrivateDataSlotEXT>"
                   ((device cffi:foreign-pointer))
                   (((private-data-slot (cffi:null-pointer)) cffi:foreign-pointer) ((allocator *default-allocator*) (or vk:allocation-callbacks cffi:foreign-pointer)))
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (private-data-slot '%vk:private-data-slot-ext private-data-slot :in :handle :optional)
  (allocator '(:struct %vk:allocation-callbacks) allocator :in :optional))

(defvk-simple-fun (set-private-data-ext
                   %vk:set-private-data-ext
                   "Represents <vkSetPrivateDataEXT>"
                   ((device cffi:foreign-pointer) (object-type keyword) (object-handle unsigned-byte) (private-data-slot cffi:foreign-pointer) (data unsigned-byte))
                   ()
                  nil
                  t)
  (device '%vk:device device :in :handle)
  (object-type '%vk:object-type object-type :in :raw)
  (object-handle :uint64 object-handle :in :raw)
  (private-data-slot '%vk:private-data-slot-ext private-data-slot :in :handle)
  (data :uint64 data :in :raw))

(defvk-create-handle-fun (get-private-data-ext
                          %vk:get-private-data-ext
                          "Represents <vkGetPrivateDataEXT>"
                          ((device cffi:foreign-pointer) (object-type keyword) (object-handle unsigned-byte) (private-data-slot cffi:foreign-pointer))
                          ()
                          t
                          t)
  (device '%vk:device device :in :handle)
  (object-type '%vk:object-type object-type :in :raw)
  (object-handle :uint64 object-handle :in :raw)
  (private-data-slot '%vk:private-data-slot-ext private-data-slot :in :handle)
  (data :uint64 data :out))

